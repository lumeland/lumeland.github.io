[{"url":"/getting-started/overview/","type":"page","content":"Overview","section":"Getting started"},{"url":"/getting-started/overview/#lume-is-the-galician-word-for","type":"paragraph","content":"Lume is the Galician word for fire but also a (yet another) static site\ngenerator for Deno.","description":"Overview","section":"Getting started"},{"url":"/getting-started/overview/#it's-inspired-by-other-static","type":"paragraph","content":"It's inspired by other static site generators, such as\nJekyll and Eleventy, but it's\nfaster, simpler and easier to use and configure, besides being super flexible.","description":"Overview","section":"Getting started"},{"url":"/getting-started/overview/#supports-multiple-file-formats","type":"list","content":"Supports multiple file formats, like markdown, yaml, javascript,\ntypescript, jsx and nunjucks, and it's easy to extend with more.","description":"Overview","section":"Getting started"},{"url":"/getting-started/overview/#you-can-hook-processors-to","type":"list","content":"You can hook processors to manipulate html and assets, like css or\njs.","description":"Overview","section":"Getting started"},{"url":"/getting-started/overview/#it's-deno:-forget-about","type":"list","content":"It's Deno: Forget about managing thousands of packages in node_modules or\ncomplex bundlers. Lume only installs what you need. Clean, fast and\nsecure.","description":"Overview","section":"Getting started"},{"url":"/getting-started/overview/#do-you-want-to-create-a-blog%3F","type":"heading","content":"Do you want to create a blog?","description":"Overview","section":"Getting started"},{"url":"/getting-started/overview/#try-the-base-blog-template","type":"paragraph","content":"Try the base-blog template repository,\nready to start a blog in seconds.","description":"Overview","section":"Getting started"},{"url":"/getting-started/installation/","type":"page","content":"Installation","section":"Getting started"},{"url":"/getting-started/installation/#lume-requires-deno-(v1.18.1-or","type":"paragraph","content":"Lume requires Deno (v1.18.1 or newer) being installed on your computer. Read\nthe Deno installation instructions if you\ndon't have it yet.","description":"Installation","section":"Getting started"},{"url":"/getting-started/installation/#install-lume-on-your-computer","type":"heading","content":"Install Lume on your computer","description":"Installation","section":"Getting started"},{"url":"/getting-started/installation/#the-easiest-way-to-install-lume","type":"paragraph","content":"The easiest way to install Lume is by executing the following command:","description":"Installation","section":"Getting started"},{"url":"/getting-started/installation/#deno-run-a","type":"code","content":"deno run -A https://deno.land/x/lume/install.ts\n","description":"Installation","section":"Getting started"},{"url":"/getting-started/installation/#now-you-have-the-lume","type":"paragraph","content":"Now you have the lume command.\nOnce installed, you can update Lume to the latest version by running:","description":"Installation","section":"Getting started"},{"url":"/getting-started/installation/#lume","type":"code","content":"lume upgrade\n","description":"Installation","section":"Getting started"},{"url":"/getting-started/installation/#note:-if-you-get-an-error","type":"paragraph","content":"Note: If you get an error upgrading from an old versions of Lume, just install\nit again.","description":"Installation","section":"Getting started"},{"url":"/getting-started/installation/#use-the-command-lume-upgrade","type":"paragraph","content":"Use the command lume upgrade --dev to install the latest development version\n(the last commit in the Github repository).\nIt's useful to test new features of Lume before released.","description":"Installation","section":"Getting started"},{"url":"/getting-started/installation/#execute-it-without-install","type":"heading","content":"Execute it without install","description":"Installation","section":"Getting started"},{"url":"/getting-started/installation/#the-ci.ts-file-works-exactly","type":"paragraph","content":"The ci.ts file works exactly like the lume command but without installation.\nIt's useful for CI environments:","description":"Installation","section":"Getting started"},{"url":"/getting-started/installation/#deno-run-a-1","type":"code","content":"deno run -A https://deno.land/x/lume/ci.ts\n","description":"Installation","section":"Getting started"},{"url":"/getting-started/command-line/","type":"page","content":"Command line usage","section":"Getting started"},{"url":"/getting-started/command-line/#these-examples-assume-that-you","type":"paragraph","content":"These examples assume that you have installed Lume as the lume executable:","description":"Command line usage","section":"Getting started"},{"url":"/getting-started/command-line/#build-the-site","type":"heading","content":"Build the site","description":"Command line usage","section":"Getting started"},{"url":"/getting-started/command-line/#to-build-your-website-simply","type":"paragraph","content":"To build your website, simply run:","description":"Command line usage","section":"Getting started"},{"url":"/getting-started/command-line/#lume","type":"code","content":"lume\n","description":"Command line usage","section":"Getting started"},{"url":"/getting-started/command-line/#this-command-will-compile-your","type":"paragraph","content":"This command will compile your documents to HTML and save them into the dest\ndirectory (usually _site).","description":"Command line usage","section":"Getting started"},{"url":"/getting-started/command-line/#typically-you-will-want-to-see","type":"paragraph","content":"Typically you will want to see the site in your browser so to start a local\nserver with your site, add the --serve (or -s) argument:","description":"Command line usage","section":"Getting started"},{"url":"/getting-started/command-line/#lume-1","type":"code","content":"lume --serve\n","description":"Command line usage","section":"Getting started"},{"url":"/getting-started/command-line/#this-command-init-a-local-web","type":"paragraph","content":"This command init a local web server and starts watching the changes of\nyour site. So if you edit anything, Lume will rebuild the site and reload\nautomatically your browser with the new changes. The local server use the port\n3000 by default but you can change it with the --port argument. For example:","description":"Command line usage","section":"Getting started"},{"url":"/getting-started/command-line/#lume-serve","type":"code","content":"lume --serve --port=8000\n","description":"Command line usage","section":"Getting started"},{"url":"/getting-started/command-line/#if-you-don't-want-to-start-a","type":"paragraph","content":"If you don't want to start a local server but want to watch the changes, use the\n--watch (or -w) argument:","description":"Command line usage","section":"Getting started"},{"url":"/getting-started/command-line/#lume-2","type":"code","content":"lume --watch\n","description":"Command line usage","section":"Getting started"},{"url":"/getting-started/command-line/#create-a-config-file","type":"heading","content":"Create a config file","description":"Command line usage","section":"Getting started"},{"url":"/getting-started/command-line/#lume-don't-need-a-config-file","type":"paragraph","content":"Lume don't need a config file to work, but is required to change the default\nbehavior like adding plugins, ignore files, etc. The\nconfig file is very simple and you can create it by yourself,\nbut for convenience you can use the following command.","description":"Command line usage","section":"Getting started"},{"url":"/getting-started/command-line/#lume-3","type":"code","content":"lume init\n","description":"Command line usage","section":"Getting started"},{"url":"/getting-started/command-line/#this-will-create-a-config-file","type":"paragraph","content":"This will create a config file for you, after some questions. It also can\nconfigure VS Code if you use this code editor\nwith the\nDeno extension.","description":"Command line usage","section":"Getting started"},{"url":"/getting-started/command-line/#other-commands","type":"heading","content":"Other commands","description":"Command line usage","section":"Getting started"},{"url":"/getting-started/command-line/#there-are-other-useful-commands","type":"paragraph","content":"There are other useful commands like:","description":"Command line usage","section":"Getting started"},{"url":"/getting-started/command-line/#lume-v:-to-show-the-current","type":"list","content":"lume -V: to show the current version.","description":"Command line usage","section":"Getting started"},{"url":"/getting-started/command-line/#lume-upgrade:-to-upgrade-lume","type":"list","content":"lume upgrade: to upgrade Lume to the latest version.","description":"Command line usage","section":"Getting started"},{"url":"/getting-started/command-line/#lume-run:-to-run-a-custom","type":"list","content":"lume run: to run a custom script.","description":"Command line usage","section":"Getting started"},{"url":"/getting-started/command-line/#to-see-all-available-commands","type":"paragraph","content":"To see all available commands and arguments, run lume --help.","description":"Command line usage","section":"Getting started"},{"url":"/getting-started/command-line/#passing-arguments-to-deno","type":"heading","content":"Passing arguments to Deno","description":"Command line usage","section":"Getting started"},{"url":"/getting-started/command-line/#deno-cli-has-some-options-that","type":"paragraph","content":"Deno CLI has some options that can be interesting for your site build. For\nexample,\nNode.js compatiblity mode\nwith --compat flag,\na configuration file\nwith --config=<FILE> or a\nimport map file\nwith --import-map=<FILE>.","description":"Command line usage","section":"Getting started"},{"url":"/getting-started/command-line/#lume-cli-runs-deno-cli-with","type":"paragraph","content":"Lume CLI runs Deno CLI with some arguments predefined, but you can customize\nthem including the Deno arguments after --. For example, if you want to run\nLume with a custom import map and Node compatibility:","description":"Command line usage","section":"Getting started"},{"url":"/getting-started/command-line/#lume-","type":"code","content":"lume -- --import-map=import_map.json --compat\n","description":"Command line usage","section":"Getting started"},{"url":"/getting-started/config-file/","type":"page","content":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#lume-processes-your-files-based","type":"paragraph","content":"Lume processes your files based on the file extension. Which file extensions\nare processed how is determined by tying the extensions to template engines\nor processors. Some extensions are enabled by default, for example\nMarkdown (*.md) or Nunjucks (*.njk). This means that all *.md, and\n*.njk files will be loaded, processed and saved as *.html files.","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#you-can-customize-this-by","type":"paragraph","content":"You can customize this by adding a _config.ts or _config.js file, which adds\nto or overrides the default options; for example, to use a different template\nengine or to process different file types with other extensions. Although you\ncan code this in the config file, for convenience, Lume includes plugins\nfor common transformations, such as Markdown and Nunjucks.","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#the-config-file-must-be-placed","type":"paragraph","content":"The config file must be placed in the site's root directory, which you can\ncreate yourself or with the following command:","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#the-_config.js-file-is-a","type":"paragraph","content":"The _config.js file is a JavaScript module that exports a Lume instance. The\nminimal required code is:","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#import-lume-from","type":"code","content":"import lume from \"lume/mod.ts\";\n\nconst site = lume();\n\nexport default site;\n","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#you-can-pass-an-object-with","type":"paragraph","content":"You can pass an object with configuration data to your site. The available\noptions are:","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#cwd","type":"heading","content":"cwd","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#the-cwd-option-defines-the-root","type":"paragraph","content":"The cwd option defines the root of your project. The src and dest\ndirectory are relative to this path. By default is the value of Deno.cwd() and\nyou may not modify it (unless you have a good reason).","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#you-can-override-it-in-the-cli","type":"paragraph","content":"You can override it in the CLI, with the option --root. This is useful to\nexecute Lume in a project in a different folder:","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#run-lume-in-the","type":"code","content":"# Run lume in the projects/my-blog subdirectory\nlume --root ./projects/my-blog\n","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#src","type":"heading","content":"src","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#this-is-the-directory-of-the","type":"paragraph","content":"This is the directory of the sources of your site. All files needed to build\nyour site must be here. Files and folders outside this directory won't be\nincluded in your site. It's relative to cwd and by default it's . (the same\ndirectory), but some people prefer to store the source files in a subfolder like\nsrc.","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#you-can-override-the-value-from","type":"paragraph","content":"You can override the value from the CLI with --src, useful if you have\ndifferent sites in the same directory:","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#lume-src","type":"code","content":"lume --src ./src\n","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#dest","type":"heading","content":"dest","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#this-is-the-destination-of-your","type":"paragraph","content":"This is the destination of your site, the output files will be saved here. It's\nrelative to cwd and by default is _site. The dest directory can be inside\nthe src directory (in fact, it is by default).","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#you-can-override-the-value-from-1","type":"paragraph","content":"You can override the value from the CLI with --dest, useful if you want to\ngenerate the site without override the previous one:","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#lume-dest","type":"code","content":"lume --dest ./output\n","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#location","type":"heading","content":"location","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#this-is-the-url-where-the-site","type":"paragraph","content":"This is the URL where the site will be published. Useful to generate absolute\nURLs or if your site is published in a subdirectory, for example:\nhttps://username.github.io/project-name/. The value must be an\nURL object, for\nexample:","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#const-site-lume(-location:","type":"code","content":"const site = lume({\n  location: new URL(\"https://example.com\"),\n});\n","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#if-you-start-a-local-server","type":"paragraph","content":"If you start a local server (with lume --serve), this value is always\nhttp://localhost:3000 (or the defined port if you change it).","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#you-can-override-the-value-from-2","type":"paragraph","content":"You can override the value from the CLI with --location, very useful if you\nwant to build and deploy the site to different locations:","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#lume-location","type":"code","content":"lume --location https://my-site.com/blog/\n","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#dev","type":"heading","content":"dev","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#set-true-to-build-the-site-in","type":"paragraph","content":"Set true to build the site in development mode. The only difference is that\npages with the value draft: true will be included in the build (in production\nmode they are ignored). This value can be used also to load or configure plugins\ndifferently according to the environment. For example: minify the Javascript\ncode only in production mode.","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#by-default-is-false-and-you","type":"paragraph","content":"By default is false, and you can override the value from the CLI with --dev.","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#lume-1","type":"code","content":"lume --dev\n","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#prettyurls","type":"heading","content":"prettyUrls","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#to-generate-pretty-urls-for","type":"paragraph","content":"To generate pretty URLs, for example /about-us/ instead of /about-us.html.\nIt only has effect on pages without url variable\n(see URLs documentation). It's enabled by default,\nset false to disable it.","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#server","type":"heading","content":"server","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#this-is-an-object-to-configure","type":"paragraph","content":"This is an object to configure the local server. It has the following options:","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#port:-to-configure-the-port-of","type":"list","content":"port: to configure the port of the server. By default is 3000. It can be\noverride also from CLI with --port.","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#page404:-to-configure-the-html","type":"list","content":"page404: to configure the HTML page to display for 404 errors. By default\nis /404.html. If you are building a SPA with dynamic urls, you may want to\nchange it to /index.html.","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#open:-set-true-to-automatically","type":"list","content":"open: set true to automatically open the site in the browser after\nstarting the local web server.","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#watcher","type":"heading","content":"watcher","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#an-object-to-configure-the-file","type":"paragraph","content":"An object to configure the file watcher:","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#debounce:-the-debounce-interval","type":"list","content":"debounce: The debounce interval (in milliseconds). By default is 100.","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#ignore:-an-array-of-paths-that","type":"list","content":"ignore: An array of paths that the watcher will ignore.","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#components","type":"heading","content":"Components","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#an-object-to-configure-the","type":"paragraph","content":"An object to configure the components load and output files.","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#directory:-the-directory-where","type":"list","content":"directory: The directory where the components files are stored.","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#variable:-the-variable-name","type":"list","content":"variable: The variable name used to access to the loaded components.","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#cssfile:-the-file-name-to","type":"list","content":"cssFile: The file name to export the CSS code of the components.","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#jsfile:-the-file-name-to-export","type":"list","content":"jsFile: The file name to export the JS code of the components.","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#this-is-an-example-with-all","type":"paragraph","content":"This is an example with all options with the default values:","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#import-lume-from-1","type":"code","content":"import lume from \"lume/mod.ts\";\n\nconst site = lume({\n  cwd: Deno.cwd(),\n  src: \".\",\n  dest: \"_site\",\n  location: new URL(\"http://localhost:3000\"),\n  dev: false\n  prettyUrls: true,\n  server: {\n    port: 3000,\n    page404: \"/404.html\",\n    open: false,\n  },\n  watcher: {\n    debounce: 100,\n    ignore: []\n  },\n  components: {\n    directory: \"/_components\",\n    variable: \"comp\",\n    cssFile: \"/components.css\",\n    jsFile: \"/components.js\",\n  },\n});\n\nexport default site;\n","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#installing-plugins","type":"heading","content":"Installing plugins","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#as-stated-above-plugins-add","type":"paragraph","content":"As stated above, plugins add extra functionality or support for new formats.\nThere are some basic plugins installed by default (like support for markdown,\nyaml or json formats), but there are other plugins that you can enable. For\nexample, to add the svg plugin (that optimizes SVG files), you have to import\nthe plugin and enable it with use() in the config file:","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#import-lume-from-2","type":"code","content":"import lume from \"lume/mod.ts\";\nimport svgo from \"lume/plugins/svgo.ts\";\n\nconst site = lume();\n\n// Add svgo plugin\nsite.use(svgo());\n\nexport default site;\n","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#for-convenience-the-command","type":"paragraph","content":"For convenience, the command lume init accepts also the --plugins argument\nthat automatically create the code to install and register a plugin. For\nexample, to create a config file including the postcss and svg plugins:","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#lume-init","type":"code","content":"lume init --plugins=postcss,svg\n","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#copy-static-files","type":"heading","content":"Copy static files","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#static-files-are-files-that","type":"paragraph","content":"Static files are files that don't have to be processed, like images, PDFs,\nvideos or audios. So it's better (and faster) to copy these files directly to\ndest directory with the copy method:","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#copy-the-\"img\"-directory-to","type":"code","content":"// Copy the \"img\" directory to _site/img\nsite.copy(\"img\");\n\n// Copy the file to _site/favicon.ico\nsite.copy(\"favicon.ico\");\n","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#the-path-is-relative-to-the","type":"paragraph","content":"The path is relative to the source directory of your site (configured in src)\nand the files and directories are copied as is, maintaining the same directory\nstructure. If you want to change the output directory, use the second parameter:","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#copy-the-\"img\"-directory-to-1","type":"code","content":"// Copy the \"img\" directory to _site/images\nsite.copy(\"img\", \"images\");\n\n// Copy the \"static-files/favicons/favicon.ico\" to _site/favicon.ico\nsite.copy(\"static-files/favicons/favicon.ico\", \"favicon.ico\");\n\n// Copy the content of \"assets\" directory to the root of your site\nsite.copy(\"assets\", \".\");\n","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#the-method-site.copy()-only","type":"paragraph","content":"The method site.copy() only accepts files and folders. Patterns like\nimg/*.png are not supported. The files and folders copied are not processed,\neven if they have known extensions like .md, .njk, etc.","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#ignore-files-and-directories","type":"heading","content":"Ignore files and directories","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#by-default-all-files-and","type":"paragraph","content":"By default, all files and directories starting with . or _ are ignored, in\naddition to files and folders copied with site.copy(). You can add more by\nusing the ignore() method:","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#site.ignore(\"readme.md\"","type":"code","content":"site.ignore(\"README.md\", \"CHANGELOG.md\", \"node_modules\");\n","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#the-following-paths-are-ignored","type":"paragraph","content":"The following paths are ignored by default:","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#node_modules","type":"list","content":"node_modules","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#import_map.json","type":"list","content":"import_map.json","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#deno.json","type":"list","content":"deno.json","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#template-filters","type":"heading","content":"Template filters","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#template-filters-are-functions","type":"paragraph","content":"Template filters are functions that you can use in your layouts to modify\ncontent. Some template engines, like Nunjucks,\nhave several builtin filters,\nbut you can add your own:","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#filter-to-convert-a-string","type":"code","content":"// Filter to convert a string to uppercase\nsite.filter(\"uppercase\", (value) => value.toUpperCase());\n","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#now-use-it-in-your-nunjucks","type":"paragraph","content":"Now, use it in your Nunjucks templates:","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#lessh1greater-title-or-uppercase","type":"code","content":"<h1>{{ title | uppercase }}</h1>\n","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#if-your-filter-is-asynchronous","type":"paragraph","content":"If your filter is asynchronous, set true as the third argument:","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#site.filter(\"async_filter\"","type":"code","content":"site.filter(\"async_filter\", async (value) => value, true);\n","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#note-that-not-all-template","type":"paragraph","content":"Note that not all template engines support async filters.","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#helpers","type":"heading","content":"Helpers","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#some-templates-engines-allows","type":"paragraph","content":"Some templates engines allows to add other helpers different to filters, like\ncustom tags. To configure that, there's the helper() method that allows to add\nany generical helper. Example:","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#site.helper(\"uppercase\"-(text)","type":"code","content":"site.helper(\"uppercase\", (text) => text.toUpperCase(), { type: \"tag\" });\n","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#percent-uppercase-user.name","type":"code","content":"{% uppercase user.name %}\n","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#the-third-argument-is-an-object","type":"paragraph","content":"The third argument is an object with different properties:","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#name","type":"paragraph","content":"Name","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#description","type":"paragraph","content":"Description","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#type","type":"paragraph","content":"type","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#the-type-of-helper.-it-can-be","type":"paragraph","content":"The type of helper. It can be tag, filter or any other, depending on the template engine.","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#async","type":"paragraph","content":"async","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#set-true-to-configure-as-async","type":"paragraph","content":"Set true to configure as async helper","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#body","type":"paragraph","content":"body","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#set-true-to-configure-that-the","type":"paragraph","content":"Set true to configure that the helper accept a body (supported only by nunjucks custom tags)","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#example-of-custom-tag-with","type":"paragraph","content":"Example of custom tag with body:","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#site.helper(\"uppercase\"-(body)","type":"code","content":"site.helper(\"uppercase\", (body) => body.toUpperCase(), {\n  type: \"tag\",\n  body: \"true\",\n});\n","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#now-the-tag-includes-a","type":"paragraph","content":"Now the tag includes a body:","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#percent-uppercase-percent-hello","type":"code","content":"{% uppercase %}\nHello, {{ user.name }}\n{% enduppercase %}\n","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#note:-the-function-filter-is","type":"paragraph","content":"Note: The function filter is just a shortcut of helper with some\nconfigurations:","description":"Configuration","section":"Getting started"},{"url":"/getting-started/config-file/#","type":"code","content":"// This:\nsite.filter(\"uppercase\", (text) => text.toUpperCase());\n\n// is equivalent to:\nsite.helper(\"uppercase\", (text) => text.toUpperCase(), { type: \"filter\" });\n","description":"Configuration","section":"Getting started"},{"url":"/getting-started/examples/","type":"page","content":"Examples","section":"Getting started"},{"url":"/getting-started/examples/#this-is-a-list-of-sites-built","type":"paragraph","content":"This is a list of sites built with Lume that have the source code publicly\nvisible:","description":"Examples","section":"Getting started"},{"url":"/getting-started/examples/#base-blog-the-official-starter","type":"list","content":"Base Blog\nThe official starter to build a blog -\nSource code","description":"Examples","section":"Getting started"},{"url":"/getting-started/examples/#muse-blog-a-starter-template","type":"list","content":"Muse Blog\nA starter template to build a blog for musicians -\nSource code","description":"Examples","section":"Getting started"},{"url":"/getting-started/examples/#todo-app-example-of-a-react","type":"list","content":"Todo App\nExample of a React app with bundled and minified tsx code -\nSource code","description":"Examples","section":"Getting started"},{"url":"/getting-started/examples/#lume-documentation-this-web","type":"list","content":"Lume documentation\nThis web site - Source code","description":"Examples","section":"Getting started"},{"url":"/getting-started/examples/#tarugo-21-an-event-about","type":"list","content":"Tarugo 21\nAn event about technology and business in Madrid, Spain -\nSource code","description":"Examples","section":"Getting started"},{"url":"/getting-started/examples/#oak-studio-a-creative-agency","type":"list","content":"OAK Studio\nA creative agency based in Bartlesville, Oklahoma -\nSource code","description":"Examples","section":"Getting started"},{"url":"/getting-started/examples/#exact-report-generator-a-tool","type":"list","content":"Exact Report Generator\nA tool to create financial reports -\nSource code","description":"Examples","section":"Getting started"},{"url":"/getting-started/examples/#macadam-grinding-a-blog-about","type":"list","content":"Macadam Grinding\nA blog about cycling by Isaac Tait -\nSource code","description":"Examples","section":"Getting started"},{"url":"/getting-started/examples/#ensino-a-collection-of","type":"list","content":"Ensino\nA collection of resources for Galego teachers by Laura Rubio -\nSource code","description":"Examples","section":"Getting started"},{"url":"/getting-started/examples/#tobias-schmidt-the-personal","type":"list","content":"Tobias Schmidt\nThe personal blog of Tobias Schmidt -\nSource code","description":"Examples","section":"Getting started"},{"url":"/getting-started/examples/#kusaeni-the-personal-blog-of","type":"list","content":"Kusaeni\nThe personal blog of Kusaeni -\nSource code","description":"Examples","section":"Getting started"},{"url":"/getting-started/examples/#fabon-the-personal-website-of","type":"list","content":"Fabon\nThe personal website of Fabon -\nSource code","description":"Examples","section":"Getting started"},{"url":"/getting-started/examples/#better-know-canvas-a","type":"list","content":"Better Know Canvas\nA collection of advanced web graphics tutorials by Fernando Serboncini -\nSource code","description":"Examples","section":"Getting started"},{"url":"/getting-started/examples/#denissb-a-personal-website-of","type":"list","content":"DenissB\nA personal website of a web developer -\nSource code","description":"Examples","section":"Getting started"},{"url":"/getting-started/examples/#notion-enhancer","type":"list","content":"notion-enhancer documentation\nan enhancer/customiser for the all-in-one productivity workspace notion.so -\nSource code","description":"Examples","section":"Getting started"},{"url":"/getting-started/examples/#johan-brook-the-personal","type":"list","content":"Johan Brook\nThe personal website and blog of Johan -\nSource code","description":"Examples","section":"Getting started"},{"url":"/getting-started/examples/#scarf@127.0.0.1-the-personal","type":"list","content":"scarf@127.0.0.1\nThe personal blog of scarf -\nSource code","description":"Examples","section":"Getting started"},{"url":"/getting-started/examples/#aiotter-the-technical-blog-of","type":"list","content":"aiotter\nThe technical blog of Yuto Oguchi -\nSource code","description":"Examples","section":"Getting started"},{"url":"/getting-started/examples/#if-you-want-to-include-your","type":"paragraph","content":"If you want to include your project in this list, please\nedit this page\nand send me a pull request.","description":"Examples","section":"Getting started"},{"url":"/creating-pages/page-files/","type":"page","content":"Page files","section":"Creating pages"},{"url":"/creating-pages/page-files/#pages-are-the-files-that-are","type":"paragraph","content":"Pages are the files that are loaded, processed and saved in your site. You can\ncreate pages using different formats (md, js, ts, jsx, tsx, yml,\netc) but the simplest way is by adding a Markdown file in the root directory\nwith a suitable filename and .md as extension. Lume will load these files and\ngenerate HTML pages with them:","description":"Page files","section":"Creating pages"},{"url":"/creating-pages/page-files/#.-index.md-greater","type":"code","content":".\n├── index.md     => /index.html\n├── about.md     => /about/index.html\n└── contact.md   => /contact/index.html\n","description":"Page files","section":"Creating pages"},{"url":"/creating-pages/page-files/#you-can-organize-the-pages-into","type":"paragraph","content":"You can organize the pages into subdirectories, and this structure will be used\nalso in the output of the site build:","description":"Page files","section":"Creating pages"},{"url":"/creating-pages/page-files/#.-index.md-greater-1","type":"code","content":".\n├── index.md        => /index.html\n└── documentation\n    └── doc1.md     => /documentation/doc1/index.html\n    └── doc2.md     => /documentation/doc2/index.html\n","description":"Page files","section":"Creating pages"},{"url":"/creating-pages/page-files/#pretty-urls","type":"heading","content":"Pretty URLs","description":"Page files","section":"Creating pages"},{"url":"/creating-pages/page-files/#by-default-all-html-pages-will","type":"paragraph","content":"By default, all HTML pages will generate pretty URLs (URLs without the .html\nextension). This means that, instead of /about-us.html, the URL is\n/about-us/. This is done by saving all files as index.html and create all\ndirectories as needed.","description":"Page files","section":"Creating pages"},{"url":"/creating-pages/page-files/#if-you-want-to-disable-it-set","type":"paragraph","content":"If you want to disable it, set prettyUrls to false in\nconfig file, so you will have something\nlike this:","description":"Page files","section":"Creating pages"},{"url":"/creating-pages/page-files/#.-index.md-greater-2","type":"code","content":".\n├── index.md        => /index.html\n└── documentation\n    └── doc1.md     => /documentation/doc1.html\n    └── doc2.md     => /documentation/doc2.html\n","description":"Page files","section":"Creating pages"},{"url":"/creating-pages/page-files/#page-order","type":"heading","content":"Page order","description":"Page files","section":"Creating pages"},{"url":"/creating-pages/page-files/#pages-are-ordered-by-date","type":"paragraph","content":"Pages are ordered by date, using the file creation date as default. If you want\nto have full control over this, you can assign the data by prepending it to the\nfilename using the yyyy-mm-dd syntax following by an underscore _ (or\nyyyy-mm-dd-hh-ii-ss if you need also the time). Note that this part is removed\nto generate the final name:","description":"Page files","section":"Creating pages"},{"url":"/creating-pages/page-files/#.-index.md","type":"code","content":".\n├── index.md                          => /index.html\n└── posts\n    └── 2020-06-21_hello-world.md     => /posts/hello-world/index.html\n    └── 2020-06-22_my-second-post.md  => /posts/my-second-post/index.html\n","description":"Page files","section":"Creating pages"},{"url":"/creating-pages/page-files/#if-you-don't-mind-the-exact","type":"paragraph","content":"If you don't mind the exact date, only want to keep an order, you can use just\nnumbers:","description":"Page files","section":"Creating pages"},{"url":"/creating-pages/page-files/#.-index.md-1","type":"code","content":".\n├── index.md                   => /index.html\n└── docs\n    └── 1_getting-started.md   => /docs/getting-started/index.html\n    └── 2_installation.md      => /docs/installation/index.html\n    └── 3_downloads.md         => /docs/downloads/index.html\n","description":"Page files","section":"Creating pages"},{"url":"/creating-pages/page-files/#ignored-pages","type":"heading","content":"Ignored pages","description":"Page files","section":"Creating pages"},{"url":"/creating-pages/page-files/#all-files-or-directories","type":"paragraph","content":"All files or directories starting with _ are ignored by lume to generate\npages. This convention allows to place stuff that you don't want to include in\nyour site output. This is the reason why the config file is _config.js, the\noutput directory is _site, the includes directory is _includes, or shared\ndata is named _data, all these things starts with an underscore so they are\nignored on loading page files.","description":"Page files","section":"Creating pages"},{"url":"/creating-pages/page-files/#dot-files-and-directories-(such","type":"paragraph","content":"Dot files and directories (such as .git, .gitignore, etc) are also ignored.","description":"Page files","section":"Creating pages"},{"url":"/creating-pages/page-files/#changing-the-output-url","type":"heading","content":"Changing the output URL","description":"Page files","section":"Creating pages"},{"url":"/creating-pages/page-files/#you-might-want-to-have-a","type":"paragraph","content":"You might want to have a particular directory structure for your source files\nthat is different for the built site. With the url variable you change the\noutput filename of any page (see Page data)","description":"Page files","section":"Creating pages"},{"url":"/creating-pages/page-data/","type":"page","content":"Page data","section":"Creating pages"},{"url":"/creating-pages/page-data/#pages-can-contain-arbitrary","type":"paragraph","content":"Pages can contain arbitrary data. In Markdown files, the data is defined in the\nfront matter block, a block delimited by two triple-dashed lines containing\nYAML code. Let's see an example:","description":"Page data","section":"Creating pages"},{"url":"/creating-pages/page-data/#-title:-this-is-the-front","type":"code","content":"---\ntitle: This is the front matter\nurl: custom-url.html\n---\n\n# This is the page content\nHere you can write Markdown content\n","description":"Page data","section":"Creating pages"},{"url":"/creating-pages/page-data/#in-this-example-the","type":"paragraph","content":"In this example, the frontmatter contains two variables: title, that can be\nused as the page title, and url, a variable to customize the output file name\nof the page. Below the front matter you can write the Markdown with the page\ncontent.","description":"Page data","section":"Creating pages"},{"url":"/creating-pages/page-data/#standard-variables","type":"heading","content":"Standard variables","description":"Page data","section":"Creating pages"},{"url":"/creating-pages/page-data/#there-are-some-special","type":"paragraph","content":"There are some special variables that lume can understand:","description":"Page data","section":"Creating pages"},{"url":"/creating-pages/page-data/#url:-contains-the-public-url-of","type":"list","content":"url: Contains the public URL of the page, useful to create links and\nconfigure the output filename. If it doesn't exist, it's generated\nautomatically by lume.","description":"Page data","section":"Creating pages"},{"url":"/creating-pages/page-data/#date:-by-default-it's-the-file","type":"list","content":"date: By default it's the file creation date but you can override with this\nvariable (or prepending it to the filename). This value is used to sort the\npages in a list.","description":"Page data","section":"Creating pages"},{"url":"/creating-pages/page-data/#layout:-to-define-the-layout","type":"list","content":"layout: To define the layout that is used to render the page. See\nLayouts","description":"Page data","section":"Creating pages"},{"url":"/creating-pages/page-data/#draft:-to-ignore-pages-in","type":"list","content":"draft: To ignore pages in production environment, but the page is visible\nduring development (execute lume --dev to run in development environment).","description":"Page data","section":"Creating pages"},{"url":"/creating-pages/page-data/#tags:-tags-are-used-to-group","type":"list","content":"tags: Tags are used to group pages. See Tags","description":"Page data","section":"Creating pages"},{"url":"/creating-pages/page-data/#templateengine:-to-override-the","type":"list","content":"templateEngine: To override the template engine used to render the page. See\nTemplate engines","description":"Page data","section":"Creating pages"},{"url":"/creating-pages/page-data/#-url:-welcome.html-date:","type":"code","content":"---\nurl: /welcome.html\ndate: 2021-01-01\nlayout: layouts/post.njk\ndraft: true\ntags: post\n---\n","description":"Page data","section":"Creating pages"},{"url":"/creating-pages/layouts/","type":"page","content":"Layouts","section":"Creating pages"},{"url":"/creating-pages/layouts/#layouts-are-templates-that-wrap","type":"paragraph","content":"Layouts are templates that wrap around your content. They allow you to have the\nsource code for your template in one place so you don’t have to repeat things\nlike the navigation and footer on every page.","description":"Layouts","section":"Creating pages"},{"url":"/creating-pages/layouts/#layout-files-are-loaded-from-a","type":"paragraph","content":"Layout files are loaded from a special directory named _includes. This\ndirectory can contain not only layouts but other files, so a good practice is to\nsave them in a subdirectory like _includes/layouts.","description":"Layouts","section":"Creating pages"},{"url":"/creating-pages/layouts/#in-the-following-page-we-have","type":"paragraph","content":"In the following page, we have defined the variable layout with the name of\nthe template that we want to use:","description":"Layouts","section":"Creating pages"},{"url":"/creating-pages/layouts/#-title:-this-is-the-front","type":"code","content":"---\ntitle: This is the front matter\nlayout: layouts/main.njk\n---\n\n# This is the page content\nHere you can write Markdown content\n","description":"Layouts","section":"Creating pages"},{"url":"/creating-pages/layouts/#lume-has-support-for-many","type":"paragraph","content":"Lume has support for many template engines. In this example, the layout file\nhas the extension njk, used by the\nNunjucks template engine:","description":"Layouts","section":"Creating pages"},{"url":"/creating-pages/layouts/#less!doctype-htmlgreater-lesshtml","type":"code","content":"<!doctype html>\n\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>{{ title }}</title>\n  </head>\n\n  <body>\n    <main>\n      {{ content | safe }}\n    </main>\n  </body>\n</html>\n","description":"Layouts","section":"Creating pages"},{"url":"/creating-pages/layouts/#lume-will-search-the-file","type":"paragraph","content":"Lume will search the file _includes/layouts/main.njk (note that all\nlayouts are relative to _includes directory).","description":"Layouts","section":"Creating pages"},{"url":"/creating-pages/layouts/#the-template-can-use-any","type":"paragraph","content":"The template can use any variable from the page, for example title to render\nthe title, and content with the rendered Markdown content of the page.","description":"Layouts","section":"Creating pages"},{"url":"/creating-pages/layouts/#layout-front-matter","type":"heading","content":"Layout front matter","description":"Layouts","section":"Creating pages"},{"url":"/creating-pages/layouts/#layouts-can-have-also-front","type":"paragraph","content":"Layouts can have also front matters with variables that will be merged with the\nvariables from the page. Note that variables defined in the pages have\nprecedence over the variables in the layouts. This means that you can set\ndefault values in the layouts and override them within the pages.","description":"Layouts","section":"Creating pages"},{"url":"/creating-pages/layouts/#a-layout-can-be-wrapped-around","type":"paragraph","content":"A layout can be wrapped around another layout. Just set a layout variable in\nfront matter. In this example, the following layout uses the layouts/main.njk\nlayout as a wrapper.","description":"Layouts","section":"Creating pages"},{"url":"/creating-pages/layouts/#-title:-default","type":"code","content":"---\ntitle: Default title\nlanguage: en\nlayout: layouts/main.njk\n---\n\n<article lang=\"{{ language }}\">\n  <header>\n    <h1>{{ title }}</h1>\n  </header>\n\n  {{ content | safe }}\n</article>\n","description":"Layouts","section":"Creating pages"},{"url":"/creating-pages/other-page-formats/","type":"page","content":"Other page formats","section":"Creating pages"},{"url":"/creating-pages/other-page-formats/#we-have-seen-how-to-create","type":"paragraph","content":"We have seen how to create pages from markdown files with a front matter to\ninclude arbitrary data and a layout file to render the content to output HTML\ncode. This is great if your pages contain large articles, such documentation or\nposts. But it's not so practical for other use cases. Luckily, Lume supports\nmany other formats to generate pages:","description":"Other page formats","section":"Creating pages"},{"url":"/creating-pages/other-page-formats/#pages-in-yaml","type":"heading","content":"Pages in YAML","description":"Other page formats","section":"Creating pages"},{"url":"/creating-pages/other-page-formats/#if-your-page-has-a-more","type":"paragraph","content":"If your page has a more complicated data structure than a post, you can use the\nYAML format to store this data. The YAML format is exactly the same as the front\nmatter in the markdown, but without the markdown content and triple-dashed\ndelimiters. Example:","description":"Other page formats","section":"Creating pages"},{"url":"/creating-pages/other-page-formats/#title:-contact-with","type":"code","content":"title: Contact with us\nsubtitle: Please, fill the following form\nurl: /contact-with-us/\nlayout: layouts/contact-form.njk\n\nform:\n  name: What's your name?\n  email: Your email\n  comment: Leave a comment here\n  submit: Send data\n\nfooter: Thanks for contact us!\n","description":"Other page formats","section":"Creating pages"},{"url":"/creating-pages/other-page-formats/#this-page-doesn't-contain-a","type":"paragraph","content":"This page doesn't contain a large article, but many microcopies. So YAML format\nis great because allows to better structure the data that will be used in the\nlayout (configured as layouts/contact-form.njk).","description":"Other page formats","section":"Creating pages"},{"url":"/creating-pages/other-page-formats/#the-support-for-yaml-depends-on","type":"paragraph","content":"The support for YAML depends on the YAML plugin that is\nenabled by default, so you don't need to configure anything. Just create\npages with .yml extension and that's all.","description":"Other page formats","section":"Creating pages"},{"url":"/creating-pages/other-page-formats/#pages-in-json","type":"heading","content":"Pages in JSON","description":"Other page formats","section":"Creating pages"},{"url":"/creating-pages/other-page-formats/#json-format-has-the-same","type":"paragraph","content":"JSON format has the same benefits as YAML but it's easy to generate and consume\nby computers, so it's great if the data of your page is fetched by an API or\nsomething like that. The previous example in JSON:","description":"Other page formats","section":"Creating pages"},{"url":"/creating-pages/other-page-formats/#\"title\":-\"contact-with","type":"code","content":"{\n  \"title\": \"Contact with us\",\n  \"subtitle\": \"Please, fill the following form\",\n  \"url\": \"/contact-with-us/\",\n  \"layout\": \"layouts/contact-form.njk\",\n\n  \"form\": {\n    \"name\": \"What's your name?\",\n    \"email\": \"Your email\",\n    \"comment\": \"Leave a comment here\",\n    \"submit\": \"Send data\"\n  },\n\n  \"footer\": \"Thanks for contact us!\"\n}\n","description":"Other page formats","section":"Creating pages"},{"url":"/creating-pages/other-page-formats/#the-support-for-json-depends-on","type":"paragraph","content":"The support for JSON depends on the JSON plugin that is\nenabled by default, so you don't need to configure anything. Just create\npages with .tmpl.json extension and that's all (note that .tmpl subextension\nis important to indicate that the file must generate a page).","description":"Other page formats","section":"Creating pages"},{"url":"/creating-pages/other-page-formats/#pages-in-nunjucks","type":"heading","content":"Pages in Nunjucks","description":"Other page formats","section":"Creating pages"},{"url":"/creating-pages/other-page-formats/#to-create-a-page-using-html","type":"paragraph","content":"To create a page using HTML code instead of markdown, you can write the code\nusing the syntax of any template engine, like Nunjucks. This gives more\nflexibility and is convenient for unique pages, specially if you don't want to\ncreate layout files that won't be reused by other pages except this one. Like\nwith markdown, you can create a front matter to store the variables:","description":"Other page formats","section":"Creating pages"},{"url":"/creating-pages/other-page-formats/#-title:-contact-with","type":"code","content":"---\ntitle: Contact with us\nsubtitle: Please, fill the following form\nurl: /contact-with-us/\nlayout: layouts/base.njk\n\nform:\n  name: What's your name?\n  email: Your email\n  comment: Leave a comment here\n  submit: Send data\n\nfooter: Thanks for contact us!\n---\n\n<header>\n  <h1>{{ title }}</h1>\n  <p>{{ subtitle }}</p>\n</header>\n\n<form>\n  <p>\n    <label for=\"name\">{{ form.name }}</label>\n    <input type=\"text\" id=\"name\">\n  </p>\n  <p>\n    <label for=\"email\">{{ form.email }}</label>\n    <input type=\"email\" id=\"email\">\n  </p>\n  <p>\n    <label for=\"comment\">{{ form.comment }}</label>\n    <textarea id=\"email\"></textarea>\n  </p>\n\n  <button>{{ form.submit }}</button>\n</form>\n\n<footer>\n  {{ footer }}\n</footer>\n","description":"Other page formats","section":"Creating pages"},{"url":"/creating-pages/other-page-formats/#the-support-for-nunjucks","type":"paragraph","content":"The support for Nunjucks depends on the Nunjucks plugin\nthat is enabled by default, so you don't need to configure anything. Just\ncreate pages with .njk extension and that's all.","description":"Other page formats","section":"Creating pages"},{"url":"/creating-pages/other-page-formats/#you-can-use-other-template","type":"paragraph","content":"You can use other template engines like Pug or\nEta to generate pages using their syntax but they are\ndisabled by default, so first you need to enable them in the _config.js file.","description":"Other page formats","section":"Creating pages"},{"url":"/creating-pages/other-page-formats/#pages-in-javascript-or-typescript","type":"heading","content":"Pages in Javascript or Typescript","description":"Other page formats","section":"Creating pages"},{"url":"/creating-pages/other-page-formats/#for-more-advanced-use-cases","type":"paragraph","content":"For more advanced use cases, with dynamic data, you can use javascript or\ntypescript modules. The way it works is the same as in other formats: you have\nto export the variables needed to generate this page. For example, this is an\nexample to generate the same page as in the YAML example:","description":"Other page formats","section":"Creating pages"},{"url":"/creating-pages/other-page-formats/#export-const-title-\"contact","type":"code","content":"export const title = \"Contact with us\";\nexport const subtitle = \"Please, fill the following form\";\nexport const url = \"/contact-with-us/\";\nexport const layout = \"layouts/contact-form.njk\";\n\nexport const form = {\n  name: \"What's your name?\",\n  email: \"Your email\",\n  comment: \"Leave a comment here\",\n  submit: \"Send data\",\n};\n\nexport const footer = \"Thanks for contact us!\";\n","description":"Other page formats","section":"Creating pages"},{"url":"/creating-pages/other-page-formats/#as-you-can-see-the-named","type":"paragraph","content":"As you can see, the named exports are equivalent to the values of YAML, JSON,\netc. And these values will be used by the layout (layouts/contact-form.njk) to\ngenerate the final html code.","description":"Other page formats","section":"Creating pages"},{"url":"/creating-pages/other-page-formats/#but-this-is-a-very-basic","type":"paragraph","content":"But this is a very basic example that doesn't provide much advantage over using\nYAML or JSON. Javascript and Typescript are much more powerful than that! For\nexample, the default export can be used to generate the html code:","description":"Other page formats","section":"Creating pages"},{"url":"/creating-pages/other-page-formats/#export-const-url","type":"code","content":"export const url = \"/contact-with-us/\";\nexport const layout = \"layouts/base.njk\";\n\nconst title = \"Contact with us\";\nconst subtitle = \"Please, fill the following form\";\n\nexport default `\n  <header>\n    <h1>${title}</h1>\n    <p>${subtitle}</p>\n  </header>\n`;\n","description":"Other page formats","section":"Creating pages"},{"url":"/creating-pages/other-page-formats/#in-the-above-example-(more","type":"paragraph","content":"In the above example (more simple for clarity), we are generating the HTML code\nand use the layout layouts/base.njk to wrap this code with the minimum HTML\nneeded.","description":"Other page formats","section":"Creating pages"},{"url":"/creating-pages/other-page-formats/#the-default-export-is-what","type":"paragraph","content":"The default export is what provide the power of javascript/typescript pages.\nIn the previous example it contain a string with the rendered html. But we can\nexport a function, so it will be executed to generate the final code:","description":"Other page formats","section":"Creating pages"},{"url":"/creating-pages/other-page-formats/#export-const-url-1","type":"code","content":"export const url = \"/contact-with-us/\";\nexport const layout = \"layouts/base.njk\";\n\nexport default function () {\n  const title = \"Contact with us\";\n  const subtitle = \"Please, fill the following form\";\n\n  return `\n    <header>\n      <h1>${title}</h1>\n      <p>${subtitle}</p>\n    </header>\n  `;\n}\n","description":"Other page formats","section":"Creating pages"},{"url":"/creating-pages/other-page-formats/#you-can-use-generators-to","type":"paragraph","content":"You can use generators to generate several pages using the same\njavascript/typescript file. See Pagination for\nexamples.","description":"Other page formats","section":"Creating pages"},{"url":"/creating-pages/other-page-formats/#the-support-for-javascript-and","type":"paragraph","content":"The support for Javascript and Typescript modules depends on the\nModules plugin that is enabled by default, so you\ndon't need to configure anything. Just create pages with .tmpl.js or\n.tmpl.ts extension and that's all (the .tmpl subextension is important to\nindicate that the file must generate a page).","description":"Other page formats","section":"Creating pages"},{"url":"/creating-pages/other-page-formats/#you-also-can-use-jsx-and-tsx","type":"paragraph","content":"You also can use JSX and TSX syntax, but is disabled by default, so you\nneed to enable the JSX plugin in the _config.js file.","description":"Other page formats","section":"Creating pages"},{"url":"/creating-pages/shared-data/","type":"page","content":"Shared data","section":"Creating pages"},{"url":"/creating-pages/shared-data/#in-addition-to-the-variables","type":"paragraph","content":"In addition to the variables defined in the front matter of the pages and\nlayouts, you can store other data accessible by some or all pages and layouts.\nShared data must be saved in the _data directory or _data.* files with\nextensions like .json, .yaml, .js or .ts.","description":"Shared data","section":"Creating pages"},{"url":"/creating-pages/shared-data/#the-_data.*-files","type":"heading","content":"The _data.* files","description":"Shared data","section":"Creating pages"},{"url":"/creating-pages/shared-data/#any-file-named-as-_data.*-is","type":"paragraph","content":"Any file named as _data.* is loaded and its content is accessible by all pages\nin the same directory or subdirectory.","description":"Shared data","section":"Creating pages"},{"url":"/creating-pages/shared-data/#_data.yaml-data","type":"code","content":"├── _data.yaml      # Data shared with all pages\n├── index.md\n└── documentation\n    └── _data.json  # Shared with pages in this directory or subdirectories\n    └── doc1.md\n    └── doc2.md\n    └── examples\n        └── _data.json  # Shared with pages in this directory or subdirectories\n        └── example1.md\n        └── example2.md\n","description":"Shared data","section":"Creating pages"},{"url":"/creating-pages/shared-data/#as-you-can-see-the-shared-data","type":"paragraph","content":"As you can see, the shared data is propagated in cascade following the directory\nstructure. A typical use case is to store those variables that are common to all\npages in the same directory so you don't have to repeat it for every page.","description":"Shared data","section":"Creating pages"},{"url":"/creating-pages/shared-data/#the-_data-directories","type":"heading","content":"The _data directories","description":"Shared data","section":"Creating pages"},{"url":"/creating-pages/shared-data/#_data-directories-are-similar","type":"paragraph","content":"_data directories are similar to _data files, but instead of using only one\nfile, the data is stored in several files inside that directory. The basename\nof each file determines the variable name used to store the data. Let's see an\nexample:","description":"Shared data","section":"Creating pages"},{"url":"/creating-pages/shared-data/#_data-users.json","type":"code","content":"└── _data\n    └── users.json\n    └── documents\n        └── one.js\n        └── two.js\n        └── three.js\n","description":"Shared data","section":"Creating pages"},{"url":"/creating-pages/shared-data/#in-this-example-the-data","type":"paragraph","content":"In this example, the data stored in the file _/data/users.json can be accessed\nvia users variable and documents via documents.one, documents.two and\ndocuments.three. To use this data in your templates:","description":"Shared data","section":"Creating pages"},{"url":"/creating-pages/shared-data/#lessh2greaterdocumentslessh2greater-lessulgreater-percent-for","type":"code","content":"<h2>Documents</h2>\n\n<ul>\n{% for doc in documents %}\n  <li>\n      {{ doc.title }}\n  </li>\n{% endfor %}\n</ul>\n","description":"Shared data","section":"Creating pages"},{"url":"/creating-pages/shared-data/#like-_data.*-files-you-can","type":"paragraph","content":"Like _data.* files, you can have _data directories in different directories\nso they are shared only with all pages in the same directory or subdirectories.","description":"Shared data","section":"Creating pages"},{"url":"/creating-pages/helpers/","type":"page","content":"Helpers","section":"Creating pages"},{"url":"/creating-pages/helpers/#helpers-are-functions","type":"paragraph","content":"Helpers are functions accessible from pages and layouts that help to render the\ncontent. More info about how to create helpers in the\nConfiguration page.","description":"Helpers","section":"Creating pages"},{"url":"/creating-pages/helpers/#there-are-different-types-of","type":"paragraph","content":"There are different types of helpers, the most common type is a filter.","description":"Helpers","section":"Creating pages"},{"url":"/creating-pages/helpers/#filters","type":"heading","content":"Filters","description":"Helpers","section":"Creating pages"},{"url":"/creating-pages/helpers/#filters-are-functions-that-can","type":"paragraph","content":"Filters are functions that can be applied to variables to transform content.\nNunjucks template engine\nhas some builtin filters,\nfor example:","description":"Helpers","section":"Creating pages"},{"url":"/creating-pages/helpers/#lessh1greater-'welcome'-or-upper","type":"code","content":"<h1>{{ 'Welcome' | upper }}</h1>\n","description":"Helpers","section":"Creating pages"},{"url":"/creating-pages/helpers/#output:","type":"paragraph","content":"Output:","description":"Helpers","section":"Creating pages"},{"url":"/creating-pages/helpers/#lessh1greaterwelcomelessh1greater","type":"code","content":"<h1>WELCOME</h1>\n","description":"Helpers","section":"Creating pages"},{"url":"/creating-pages/helpers/#lume-allows-to-create-your-own","type":"paragraph","content":"Lume allows to create your own filters to be used by all template engines. New\nfilters must be registered in the _config.js file:","description":"Helpers","section":"Creating pages"},{"url":"/creating-pages/helpers/#filter-to-prepend-a-to","type":"code","content":"// Filter to prepend a 👍 to any text\nsite.filter(\"thumbsUp\", (value) => \"👍 \" + value);\n","description":"Helpers","section":"Creating pages"},{"url":"/creating-pages/helpers/#now-this-filter-is-available-in","type":"paragraph","content":"Now this filter is available in your layouts:","description":"Helpers","section":"Creating pages"},{"url":"/creating-pages/helpers/#lessh1greater-'welcome'-or-upper-or","type":"code","content":"<h1>{{ 'Welcome' | upper | thumbsUp }}</h1>\n","description":"Helpers","section":"Creating pages"},{"url":"/creating-pages/helpers/#lessh1greater","type":"code","content":"<h1>👍 WELCOME</h1>\n","description":"Helpers","section":"Creating pages"},{"url":"/creating-pages/helpers/#builtin-filters","type":"heading","content":"Builtin filters","description":"Helpers","section":"Creating pages"},{"url":"/creating-pages/helpers/#lume-includes-the-following","type":"paragraph","content":"Lume includes the following convenient preinstalled filters:","description":"Helpers","section":"Creating pages"},{"url":"/creating-pages/helpers/#md:-allows-to-render-markdown","type":"list","content":"md: Allows to render Markdown content to HTML.\nMore info","description":"Helpers","section":"Creating pages"},{"url":"/creating-pages/helpers/#njk:-allows-to-render-nunjucks","type":"list","content":"njk: Allows to render Nunjucks content to HTML.\nMore info","description":"Helpers","section":"Creating pages"},{"url":"/creating-pages/helpers/#url-htmlurl:-allows-to","type":"list","content":"url / htmlUrl: Allows to normalize URLs. More info","description":"Helpers","section":"Creating pages"},{"url":"/creating-pages/helpers/#using-the-filters-in-javascript-modules","type":"heading","content":"Using the filters in JavaScript modules","description":"Helpers","section":"Creating pages"},{"url":"/creating-pages/helpers/#if-you're-using","type":"paragraph","content":"If you're using JavaScript/TypeScript modules instead of a template engine like\nNunjucks, filters are passed as the second argument of your default exported\nfunction:","description":"Helpers","section":"Creating pages"},{"url":"/creating-pages/helpers/#export-default-function-(data","type":"code","content":"export default function (data, filters) {\n  return `<a href=\"${filters.url(\"/about-us\")}\">About us</a>`;\n}\n","description":"Helpers","section":"Creating pages"},{"url":"/creating-pages/helpers/#tags","type":"heading","content":"Tags","description":"Helpers","section":"Creating pages"},{"url":"/creating-pages/helpers/#tags-are-available-only-in","type":"paragraph","content":"Tags are available only in Nunjucks templates. They allows to create a custom\ntag to format and manipulate content. The tags can contain a body or not. This\nis an example with a tag with a body:","description":"Helpers","section":"Creating pages"},{"url":"/creating-pages/helpers/#see-helpers-configuration-for","type":"paragraph","content":"See Helpers configuration for more\ninformation about how to create your own tags.","description":"Helpers","section":"Creating pages"},{"url":"/creating-pages/tags/","type":"page","content":"Tags","section":"Creating pages"},{"url":"/creating-pages/tags/#you-can-assign-one-or-multiple","type":"paragraph","content":"You can assign one or multiple tags to pages using the tags variable. Tags\nallows to group content in interesting ways.","description":"Tags","section":"Creating pages"},{"url":"/creating-pages/tags/#for-example-in-a-blog-site-you","type":"paragraph","content":"For example, in a blog site you may want to group post of different categories:","description":"Tags","section":"Creating pages"},{"url":"/creating-pages/tags/#-title:-the-history-of-the","type":"code","content":"---\ntitle: The history of the static site generators\ntags:\n  - post\n  - ssg\n---\n","description":"Tags","section":"Creating pages"},{"url":"/creating-pages/tags/#this-post-has-two-tags-one-to","type":"paragraph","content":"This post has two tags, one to identify the type of page (post) and other with\nthe topic (ssg). To collect all pages tagged as post in the layouts, use the\nsearch object:","description":"Tags","section":"Creating pages"},{"url":"/creating-pages/tags/#lessulgreater-percent-for-post-in","type":"code","content":"<ul>\n  {% for post in search.pages(\"post\") %}\n  <li>{{ post.data.title }}</li>\n  {% endfor %}\n</ul>\n","description":"Tags","section":"Creating pages"},{"url":"/creating-pages/tags/#and-to-get-all-pages-tagged-as","type":"paragraph","content":"And to get all pages tagged as post and ssg add the two tags names separated\nwith a space:","description":"Tags","section":"Creating pages"},{"url":"/creating-pages/tags/#lessulgreater-percent-for-post-in-1","type":"code","content":"<ul>\n  {% for post in search.pages(\"post ssg\") %}\n  <li>{{ post.data.title }}</li>\n  {% endfor %}\n</ul>\n","description":"Tags","section":"Creating pages"},{"url":"/creating-pages/tags/#tags-in-_data","type":"heading","content":"Tags in _data","description":"Tags","section":"Creating pages"},{"url":"/creating-pages/tags/#unlikely-other-values-when-you","type":"paragraph","content":"Unlikely other values, when you define tags in a _data.* file and in the\nfront matter of the pages, the value is not overrided, but aggregated. In other\nwords: the page will have all tags defined in _data.* and in the front\nmatter. In the previous example, instead of assigning the \"post\" tag to all\npages manually, you could define it in a _data.* file in the directory where\nall posts are stored and use the front matter to assign the other tags\nindividually.","description":"Tags","section":"Creating pages"},{"url":"/creating-pages/data/","type":"page","content":"Extra data","section":"Creating pages"},{"url":"/creating-pages/data/#you-can-assign-extra-data-to","type":"paragraph","content":"You can assign extra data to your site available everywhere. This allows to have\nfunctions that you can execute everywhere, for example for searching or\npagination results.","description":"Extra data","section":"Creating pages"},{"url":"/creating-pages/data/#in-fact-there-are-two-helpers","type":"paragraph","content":"In fact, there are two helpers available by default:\nsearch and paginate\nprecisely for that purpose.","description":"Extra data","section":"Creating pages"},{"url":"/creating-pages/data/#if-you-need-to-add-more-extra","type":"paragraph","content":"If you need to add more extra data, use the _config.js file:","description":"Extra data","section":"Creating pages"},{"url":"/creating-pages/data/#site.data(\"randomnumber\"","type":"code","content":"site.data(\"randomNumber\", function () {\n  return Math.random();\n});\n","description":"Extra data","section":"Creating pages"},{"url":"/creating-pages/data/#now-this-function-is-available","type":"paragraph","content":"Now, this function is available in your layouts:","description":"Extra data","section":"Creating pages"},{"url":"/creating-pages/data/#lesspgreaterrandom-number:","type":"code","content":"<p>Random number: {{ randomNumber() }}</p>\n","description":"Extra data","section":"Creating pages"},{"url":"/creating-pages/urls/","type":"page","content":"URLs","section":"Creating pages"},{"url":"/creating-pages/urls/#as-said-in-page-files-the","type":"paragraph","content":"As said in Page files, the output filename is\ngenerated using the original source file path:","description":"URLs","section":"Creating pages"},{"url":"/creating-pages/urls/#postsmy-first-post.md-greater","type":"code","content":"posts/my-first-post.md  =>  /posts/my-first-post/index.html\n","description":"URLs","section":"Creating pages"},{"url":"/creating-pages/urls/#by-default-the-pages-are-saved","type":"paragraph","content":"By default, the pages are saved as \"pretty URLs\", using directories for the path\nand a index.html file. So the final URL is /posts/my-fist-post/. To disable\nthis behaviour, set the option prettyUrls to false in your _config.js file\n(see Configuration).","description":"URLs","section":"Creating pages"},{"url":"/creating-pages/urls/#const-site-lume(","type":"code","content":"const site = lume({\n  prettyUrls: false,\n});\n","description":"URLs","section":"Creating pages"},{"url":"/creating-pages/urls/#postsmy-first-post.md-greater-1","type":"code","content":"/posts/my-first-post.md  =>  /posts/my-first-post.html\n","description":"URLs","section":"Creating pages"},{"url":"/creating-pages/urls/#the-url-variable","type":"heading","content":"The url variable","description":"URLs","section":"Creating pages"},{"url":"/creating-pages/urls/#the-variable-url-defined-in-the","type":"paragraph","content":"The variable url defined in the page allows to customize the output file\nindividually. For example:","description":"URLs","section":"Creating pages"},{"url":"/creating-pages/urls/#-title:-my-first-post-url:","type":"code","content":"---\ntitle: My first post\nurl: /posts/welcome/\n---\n","description":"URLs","section":"Creating pages"},{"url":"/creating-pages/urls/#in-this-example-the-url-value","type":"paragraph","content":"In this example, the url value will be used to generate the output file\ninstead of the filename:","description":"URLs","section":"Creating pages"},{"url":"/creating-pages/urls/#postsmy-first-post.md-greater-2","type":"code","content":"/posts/my-first-post.md  =>  /posts/welcome/index.html\n","description":"URLs","section":"Creating pages"},{"url":"/creating-pages/urls/#note-that-defining-manually-the","type":"paragraph","content":"Note that defining manually the URL of a page will makes that prettyUrls\noption won't have any effect. For example:","description":"URLs","section":"Creating pages"},{"url":"/creating-pages/urls/#this-outputs","type":"code","content":"# This outputs /posts/welcome/index.html\nurl: /posts/welcome/\n\n# This outputs /posts/welcome (a file without extension)\nurl: /posts/welcome\n\n# This outputs /posts/welcome.html\nurl: /posts/welcome.html\n","description":"URLs","section":"Creating pages"},{"url":"/creating-pages/urls/#relative-urls","type":"heading","content":"Relative URLs","description":"URLs","section":"Creating pages"},{"url":"/creating-pages/urls/#if-you-only-want-to-change-the","type":"paragraph","content":"If you only want to change the last part of the URL, you can use relative paths.\nFor example:","description":"URLs","section":"Creating pages"},{"url":"/creating-pages/urls/#-title:-my-fist-post-url:","type":"code","content":"---\ntitle: My fist post\nurl: ./welcome/\n---\n","description":"URLs","section":"Creating pages"},{"url":"/creating-pages/urls/#in-this-example-the-page-will","type":"paragraph","content":"In this example, the page will be saved using the directory path where the\nsource file is saved but adding welcome in the last part of the URL.","description":"URLs","section":"Creating pages"},{"url":"/creating-pages/urls/#using-..welcome-as-url-will","type":"paragraph","content":"Using ../welcome/ as URL will remove also the last directory.","description":"URLs","section":"Creating pages"},{"url":"/creating-pages/urls/#postsmy-first-post.md-greater-4","type":"code","content":"/posts/my-first-post.md  =>  /welcome/index.html\n","description":"URLs","section":"Creating pages"},{"url":"/creating-pages/urls/#urls-as-functions","type":"heading","content":"URLs as functions","description":"URLs","section":"Creating pages"},{"url":"/creating-pages/urls/#the-variable-url-accepts-also-a","type":"paragraph","content":"The variable url accepts also a function that will be used to generate the\nfinal value. This function will receive the current page as the first argument.","description":"URLs","section":"Creating pages"},{"url":"/creating-pages/urls/#for-example-let's-say-that-we","type":"paragraph","content":"For example, let's say that we want to generate automatically all URLs of our\nposts, using the title value. We can create a _data.js file in the /post/\ndirectory, with the following code:","description":"URLs","section":"Creating pages"},{"url":"/creating-pages/urls/#export-function-url(page)","type":"code","content":"export function url(page) {\n  return `./${page.data.title}/`;\n}\n","description":"URLs","section":"Creating pages"},{"url":"/creating-pages/urls/#now-all-pages-in-the-post","type":"paragraph","content":"Now, all pages in the post directory share the same url function, that returns\nthe title of the page as a relative URL, for example ./My first post/ (See\nShared data).","description":"URLs","section":"Creating pages"},{"url":"/creating-pages/urls/#due-the-url-is-relative-the","type":"paragraph","content":"Due the URL is relative, the current directory is appended automatically (it\nwill be resolved to /post/My first post/). And if you are using the\nslugify_urls plugin all output paths are\nslugified automatically, so the final url will be /post/my-fist-post/.","description":"URLs","section":"Creating pages"},{"url":"/creating-pages/urls/#using-functions-as-urls-gives-a","type":"paragraph","content":"Using functions as URLs gives a lot of flexibility to generate the URLs as you\nwant.","description":"URLs","section":"Creating pages"},{"url":"/plugins/about-plugins/","type":"page","content":"About plugins","section":"Plugins"},{"url":"/plugins/about-plugins/#lume-has-a-plugin-system-that","type":"paragraph","content":"Lume has a plugin system that allows to extend its functionality with new\nfeatures and support for more formats. Some of these plugins are enabled by\ndefault, others need to be enabled in the _config.js file.","description":"About plugins","section":"Plugins"},{"url":"/plugins/about-plugins/#to-enable-a-plugin-just-import","type":"paragraph","content":"To enable a plugin, just import the plugin module and use the use() function.\nFor example:","description":"About plugins","section":"Plugins"},{"url":"/plugins/about-plugins/#import-lume-from","type":"code","content":"import lume from \"lume/mod.ts\";\nimport jsx from \"lume/plugins/jsx.ts\";\n\nconst site = lume();\n\n// Enable the JSX plugin\nsite.use(jsx());\n\nexport default site;\n","description":"About plugins","section":"Plugins"},{"url":"/core/concepts/","type":"page","content":"General concepts","section":"Core"},{"url":"/core/concepts/#the-way-lume-works-is-very","type":"paragraph","content":"The way Lume works is very simple: it just read files in your src directory,\nprocess the content and save the final files into the dest folder.","description":"General concepts","section":"Core"},{"url":"/core/concepts/#the-file-extension-of-the-files","type":"paragraph","content":"The file extension of the files determine if they are loaded and how to process\nthem. By default only the following extensions are enabled:","description":"General concepts","section":"Core"},{"url":"/core/concepts/#page-formats:-all-files-with","type":"list","content":"Page formats: All files with the following extensions will be loaded to\ngenerate HTML pages: .md, .njk, .tmpl.json, .tmpl.js, .tmpl.ts,\n.yaml","description":"General concepts","section":"Core"},{"url":"/core/concepts/#data-formats:-the-following","type":"list","content":"Data formats: The following files will be loaded to get data that will be\nused by other pages or layouts: _data.yaml, _data.ts, _data.js,\n_data.json","description":"General concepts","section":"Core"},{"url":"/core/concepts/#this-means-that-files-with-a","type":"paragraph","content":"This means that files with a different extension will be ignored by Lume. If you\nwant to use other extensions (like .css or .jpg), you must enable them.\nTo do that, there are different choices:","description":"General concepts","section":"Core"},{"url":"/core/concepts/#if-you-only-want-to-copy-files","type":"list","content":"If you only want to copy files or folders as they are without any change,\nthe best way is using site.copy().\nMore info about copy static files.","description":"General concepts","section":"Core"},{"url":"/core/concepts/#if-you-want-to-process-the","type":"list","content":"If you want to process the content, they must loaded\n(more info about loaders). There are three types of\nloaders, depending on the purpose of the format:\n\nTo load files that generate HTML pages, use site.loadPages().\nTo load assets files (like .css or .js), use site.loadAssets().\nTo load files with shared data, use site.loadData().","description":"General concepts","section":"Core"},{"url":"/core/concepts/#in-most-cases-there's-a-plugin","type":"list","content":"In most cases, there's a plugin for that, so see the Plugins section for\nmore info.","description":"General concepts","section":"Core"},{"url":"/core/concepts/#plugins","type":"heading","content":"Plugins","description":"General concepts","section":"Core"},{"url":"/core/concepts/#everything-in-lume-is-a-plugin.","type":"paragraph","content":"Everything in Lume is a plugin. Even the support of core formats like .md,\n.yaml, .json etc is provided by the following plugins that are enabled by\ndefault:","description":"General concepts","section":"Core"},{"url":"/core/concepts/#markdown","type":"list","content":"Markdown","description":"General concepts","section":"Core"},{"url":"/core/concepts/#json","type":"list","content":"JSON","description":"General concepts","section":"Core"},{"url":"/core/concepts/#modules","type":"list","content":"Modules","description":"General concepts","section":"Core"},{"url":"/core/concepts/#nunjucks","type":"list","content":"Nunjucks","description":"General concepts","section":"Core"},{"url":"/core/concepts/#yaml","type":"list","content":"YAML","description":"General concepts","section":"Core"},{"url":"/core/concepts/#there-are-a-couple-of","type":"paragraph","content":"There are a couple of additional plugins, enabled by default to provide\ncommon features:","description":"General concepts","section":"Core"},{"url":"/core/concepts/#url","type":"list","content":"Url","description":"General concepts","section":"Core"},{"url":"/core/concepts/#search","type":"list","content":"Search","description":"General concepts","section":"Core"},{"url":"/core/concepts/#pagination","type":"list","content":"Pagination","description":"General concepts","section":"Core"},{"url":"/plugins/esbuild/","type":"page","content":"ESbuild","section":"Plugins"},{"url":"/plugins/esbuild/#the-plugin-esbuild-is-disabled","type":"paragraph","content":"The plugin esbuild is disabled by default so to enable it you have to\nimport and use it in the _config.js file:","description":"ESbuild","section":"Plugins"},{"url":"/plugins/esbuild/#import-esbuild-from","type":"code","content":"import esbuild from \"lume/plugins/esbuild.ts\";\n\nsite.use(esbuild());\n","description":"ESbuild","section":"Plugins"},{"url":"/plugins/esbuild/#it-process-your-javascript-and","type":"paragraph","content":"It process your Javascript and Typescript files using\nesbuild bundler.","description":"ESbuild","section":"Plugins"},{"url":"/plugins/esbuild/#the-available-options","type":"paragraph","content":"The available options are:","description":"ESbuild","section":"Plugins"},{"url":"/plugins/esbuild/#extensions:-array-with-the","type":"list","content":"extensions: Array with the extensions of the files that this plugin will\nhandle. By default is [\".js\", \".ts\"].","description":"ESbuild","section":"Plugins"},{"url":"/plugins/esbuild/#options:-the-options-to-pass-to","type":"list","content":"options: The options to pass to esbuild library.\nSee the esbuild documentation","description":"ESbuild","section":"Plugins"},{"url":"/plugins/esbuild/#example-with-the-default","type":"paragraph","content":"Example with the default options:","description":"ESbuild","section":"Plugins"},{"url":"/plugins/esbuild/#site.use(esbuild(","type":"code","content":"site.use(esbuild({\n  extensions: [\".ts\", \".js\"],\n  options: {\n    bundle: true,\n    format: \"esm\",\n    minify: true,\n    keepNames: true,\n    platform: \"browser\",\n    target: \"esnext\",\n    incremental: true,\n    treeShaking: true,\n  },\n}));\n","description":"ESbuild","section":"Plugins"},{"url":"/plugins/liquid/","type":"page","content":"Liquid","section":"Plugins"},{"url":"/plugins/liquid/#liquid-is-a-simple-expressive","type":"paragraph","content":"Liquid is a simple, expressive and safe template\nengine. This format is disabled by default, so you have to enable it in the\n_config.js file:","description":"Liquid","section":"Plugins"},{"url":"/plugins/liquid/#import-liquid-from","type":"code","content":"import liquid from \"lume/plugins/liquid.ts\";\n\nsite.use(liquid());\n","description":"Liquid","section":"Plugins"},{"url":"/plugins/liquid/#creating-layouts","type":"heading","content":"Creating layouts","description":"Liquid","section":"Plugins"},{"url":"/plugins/liquid/#add-a-file-with-.liquid","type":"paragraph","content":"Add a file with .liquid extension in the _includes directory. Use the front\nmatter to set data to the template.","description":"Liquid","section":"Plugins"},{"url":"/plugins/liquid/#-title:-welcome-to-my","type":"code","content":"---\ntitle: Welcome to my page\nintro: This is my first post using lume, I hope you like it!\n---\n\n<html>\n  <head>\n    <title>{{ title }}</title>\n  </head>\n\n  <body>\n    <p>{{ intro }}</p>\n  </body>\n</html>\n","description":"Liquid","section":"Plugins"},{"url":"/plugins/liquid/#creating-pages","type":"heading","content":"Creating pages","description":"Liquid","section":"Plugins"},{"url":"/plugins/liquid/#creating-pages-is-the-same-as","type":"paragraph","content":"Creating pages is the same as creating layouts, just place the .liquid file\noutside the _includes directory.","description":"Liquid","section":"Plugins"},{"url":"/plugins/liquid/#liquid-filter","type":"heading","content":"liquid filter","description":"Liquid","section":"Plugins"},{"url":"/plugins/liquid/#the-liquid-plugin-also-register","type":"paragraph","content":"The Liquid plugin also register the liquid filter, to render any string value\nas a Liquid template and output a HTML. The filter accepts an object with data.","description":"Liquid","section":"Plugins"},{"url":"/plugins/liquid/#-data:-username:","type":"code","content":"---\ndata:\n  username: Oscar\ntext: \"Hello {{ username }}\"\n---\n\n<!-- Render a string -->\n<div>{{ text | liquid: data }}<div>\n","description":"Liquid","section":"Plugins"},{"url":"/plugins/liquid/#configuration","type":"heading","content":"Configuration","description":"Liquid","section":"Plugins"},{"url":"/plugins/liquid/#this-plugin-accepts-a","type":"paragraph","content":"This plugin accepts a configuration object. The available options are:","description":"Liquid","section":"Plugins"},{"url":"/plugins/liquid/#extensions:-array-with-the","type":"list","content":"extensions: Array with the extensions of the files that this plugin will\nload. By default is [\".liquid\"].","description":"Liquid","section":"Plugins"},{"url":"/plugins/liquid/#includes:-to-configure-a","type":"list","content":"includes: To configure a different directory to search for the layouts and\ntemplates. By default is _includes.","description":"Liquid","section":"Plugins"},{"url":"/plugins/liquid/#options:-a-object-with-options","type":"list","content":"options: A object with options to configure Liquid. See\nLiquidOptions\nfor more info.","description":"Liquid","section":"Plugins"},{"url":"/plugins/inline/","type":"page","content":"Inline","section":"Plugins"},{"url":"/plugins/inline/#this-plugin-allows-to-inline","type":"paragraph","content":"This plugin allows to inline some sources, like CSS, images or JavaScript, in\nthe HTML automatically. It is disabled by default, so you have to enable it\nin the _config.js file:","description":"Inline","section":"Plugins"},{"url":"/plugins/inline/#import-inline-from","type":"code","content":"import inline from \"lume/plugins/inline.ts\";\n\nsite.use(inline());\n","description":"Inline","section":"Plugins"},{"url":"/plugins/inline/#now-any-html-tag-with-the","type":"paragraph","content":"Now, any HTML tag with the inline attribute will be included in the HTML. For\nexample:","description":"Inline","section":"Plugins"},{"url":"/plugins/inline/#lesslink-rel\"stylesheet\"","type":"code","content":"<link rel=\"stylesheet\" href=\"css/my-styles.css\" inline>\n\n<script src=\"js/my-scripts.js\" inline></script>\n\n<img src=\"img/avatar.png\" inline>\n\n<img src=\"img/logo.svg\" inline>\n","description":"Inline","section":"Plugins"},{"url":"/plugins/inline/#it's-converted","type":"paragraph","content":"It's converted to:","description":"Inline","section":"Plugins"},{"url":"/plugins/inline/#lessstylegreater-*-content-of-the-css","type":"code","content":"<style>\n  /* Content of the CSS file */\n</style>\n\n<script>\n  // Content of the js file\n</script>\n\n<img src=\"data:image/png;base64,...\">\n\n<svg>...</svg>\n","description":"Inline","section":"Plugins"},{"url":"/plugins/inline/#note-that-bitmap-images-will-be","type":"paragraph","content":"Note that bitmap images will be inlined as base64 data but svg images are\nreplaced by the <svg> elements itself. The source file must be in the dest\ndirectory (usually _site), there's no support for external URLs yet.","description":"Inline","section":"Plugins"},{"url":"/plugins/sass/","type":"page","content":"SASS","section":"Plugins"},{"url":"/plugins/sass/#the-sass-plugin-load-and","type":"paragraph","content":"The SASS plugin load and transform your .scss files using\nDenoSASS library. Only .scss files will be processed (.sass files are not supported yet). This plugin is disabled by\ndefault so to enable it you have to import and use it in the _config.js\nfile:","description":"SASS","section":"Plugins"},{"url":"/plugins/sass/#import-sass-from","type":"code","content":"import sass from \"lume/plugins/sass.ts\";\n\nsite.use(sass());\n","description":"SASS","section":"Plugins"},{"url":"/plugins/sass/#extensions:-array-with-the","type":"list","content":"extensions: Array with the extensions of the files that this plugin will\nload. By default is [\".scss\"].","description":"SASS","section":"Plugins"},{"url":"/plugins/sass/#format:-the-output-format","type":"list","content":"format: The output format (expanded or compressed). By default is compressed.","description":"SASS","section":"Plugins"},{"url":"/plugins/sass/#includes:-an-array-of","type":"list","content":"includes: An array of directories to search for the @imported files. By\ndefault is _includes.","description":"SASS","section":"Plugins"},{"url":"/plugins/relative_urls/","type":"page","content":"Relative URLs","section":"Plugins"},{"url":"/plugins/relative_urls/#the-relative_urls-plugin","type":"paragraph","content":"The relative_urls plugin converts all URLs in your HTML documents to relative,\nso you can publish the site under different domains and even subdirectories and\nall links will continue working. This plugin is disabled by default so to\nenable it you have to import and use it in the _config.js file:","description":"Relative URLs","section":"Plugins"},{"url":"/plugins/relative_urls/#import-relativeurls-from","type":"code","content":"import relativeUrls from \"lume/plugins/relative_urls.ts\";\n\nsite.use(relativeUrls());\n","description":"Relative URLs","section":"Plugins"},{"url":"/plugins/relative_urls/#all-internal-urls-of-your-site","type":"paragraph","content":"All internal URLs of your site will be relative. For example:","description":"Relative URLs","section":"Plugins"},{"url":"/plugins/relative_urls/#less!-","type":"code","content":"<!-- /articles/my-first-article/ -->\n<a href=\"/articles/my-second-article/\">Go to the second article</a>\n","description":"Relative URLs","section":"Plugins"},{"url":"/plugins/relative_urls/#the-relative_urls-plugin-will","type":"paragraph","content":"The relative_urls plugin will convert this HTML code to:","description":"Relative URLs","section":"Plugins"},{"url":"/plugins/relative_urls/#less!--1","type":"code","content":"<!-- /articles/my-first-article/ -->\n<a href=\"../my-second-article/\">Go to the second article</a>\n","description":"Relative URLs","section":"Plugins"},{"url":"/plugins/relative_urls/#this-plugin-doesn't-change-only","type":"paragraph","content":"This plugin doesn't change only the <a> elements, but any element with the\nhref attribute (link, area) or src (img, video, audio, etc).","description":"Relative URLs","section":"Plugins"},{"url":"/plugins/slugify_urls/","type":"page","content":"Slugify URLs","section":"Plugins"},{"url":"/plugins/slugify_urls/#the-slugify_urls-plugin","type":"paragraph","content":"The slugify_urls plugin converts all URLs in your HTML documents removing or\nreplacing conflictive characteres like accents, spaces, etc. This plugin is\ndisabled by default so to enable it you have to import and use it in the\n_config.js file:","description":"Slugify URLs","section":"Plugins"},{"url":"/plugins/slugify_urls/#import-slugifyurls-from","type":"code","content":"import slugifyUrls from \"lume/plugins/slugify_urls.ts\";\n\nsite.use(slugifyUrls());\n\nexport default site;\n","description":"Slugify URLs","section":"Plugins"},{"url":"/plugins/slugify_urls/#once-enabled-all-output-paths","type":"paragraph","content":"Once enabled, all output paths are automatically slugified: the spaces are\nreplaced with -, characters like ñ or á are replaced by ASCII equivalents\n(n and a) and converted to lower case:","description":"Slugify URLs","section":"Plugins"},{"url":"/plugins/slugify_urls/#postsmy-first-post.md-greater","type":"code","content":"/posts/My First Post.md  =>  /posts/my-first-post/index.html\n","description":"Slugify URLs","section":"Plugins"},{"url":"/plugins/slugify_urls/#you-can-configure-the-slugifier","type":"paragraph","content":"You can configure the slugifier in your _config.js file with the following\noptions:","description":"Slugify URLs","section":"Plugins"},{"url":"/plugins/slugify_urls/#import-slugifyurls-from-1","type":"code","content":"import slugifyUrls from \"lume/plugins/slugify_urls.ts\";\n\nsite.use(slugifyUrls({\n  lowercase: true, // Converts all characters to lowercase\n  alphanumeric: true, // Replace non alphanumeric characters for the equivalent. Example: ñ to n.\n  separator: \"-\", // Character used as separator for words\n  replace: { // An object with individual characters replacements\n    \"Ð\": \"D\", // eth\n    \"ð\": \"d\",\n    \"Đ\": \"D\", // crossed D\n    \"đ\": \"d\",\n    \"ø\": \"o\",\n    \"ß\": \"ss\",\n    \"æ\": \"ae\",\n    \"œ\": \"oe\",\n}));\n","description":"Slugify URLs","section":"Plugins"},{"url":"/plugins/date/","type":"page","content":"Date","section":"Plugins"},{"url":"/plugins/date/#the-date-plugin-is-disabled-by","type":"paragraph","content":"The Date plugin is disabled by default so you need to enable it in\n_config.js file:","description":"Date","section":"Plugins"},{"url":"/plugins/date/#import-date-from","type":"code","content":"import date from \"lume/plugins/date.ts\";\n\nsite.use(date());\n","description":"Date","section":"Plugins"},{"url":"/plugins/date/#this-plugin-register-the-date","type":"paragraph","content":"This plugin register the date filter, that allows to manipulate and format a\ndatetime value in different locales. It uses date-fns\nlibrary under the hood.","description":"Date","section":"Plugins"},{"url":"/plugins/date/#lesstimegreater-createdat-or-date","type":"code","content":"<time>{{ createdAt | date }}</time>\n","description":"Date","section":"Plugins"},{"url":"/plugins/date/#formats","type":"heading","content":"Formats","description":"Date","section":"Plugins"},{"url":"/plugins/date/#by-default-the-value-is","type":"paragraph","content":"By default, the value is formatted to yyyy-MM-dd but you can use the first\nargument to set a different format. See the\ndate-fms documentation for more\ninfo.","description":"Date","section":"Plugins"},{"url":"/plugins/date/#lesstimegreater-createdat-or","type":"code","content":"<time>{{ createdAt | date('MM/dd/yyyy') }}</time>\n","description":"Date","section":"Plugins"},{"url":"/plugins/date/#there-are-some-predefined","type":"paragraph","content":"There are some predefined formats that you can use:","description":"Date","section":"Plugins"},{"url":"/plugins/date/#format","type":"paragraph","content":"Format","description":"Date","section":"Plugins"},{"url":"/plugins/date/#atom","type":"paragraph","content":"ATOM","description":"Date","section":"Plugins"},{"url":"/plugins/date/#yyyy-mm-dd't'hh:mm:ssxxx","type":"paragraph","content":"yyyy-MM-dd'T'HH:mm:ssxxx","description":"Date","section":"Plugins"},{"url":"/plugins/date/#date","type":"paragraph","content":"DATE","description":"Date","section":"Plugins"},{"url":"/plugins/date/#yyyy-mm-dd","type":"paragraph","content":"yyyy-MM-dd","description":"Date","section":"Plugins"},{"url":"/plugins/date/#datetime","type":"paragraph","content":"DATETIME","description":"Date","section":"Plugins"},{"url":"/plugins/date/#yyyy-mm-dd-1","type":"paragraph","content":"yyyy-MM-dd HH:mm:ss","description":"Date","section":"Plugins"},{"url":"/plugins/date/#time","type":"paragraph","content":"TIME","description":"Date","section":"Plugins"},{"url":"/plugins/date/#hh:mm:ss","type":"paragraph","content":"HH:mm:ss","description":"Date","section":"Plugins"},{"url":"/plugins/date/#human_date","type":"paragraph","content":"HUMAN_DATE","description":"Date","section":"Plugins"},{"url":"/plugins/date/#ppp","type":"paragraph","content":"PPP","description":"Date","section":"Plugins"},{"url":"/plugins/date/#human_datetime","type":"paragraph","content":"HUMAN_DATETIME","description":"Date","section":"Plugins"},{"url":"/plugins/date/#pppppp","type":"paragraph","content":"PPPppp","description":"Date","section":"Plugins"},{"url":"/plugins/date/#lesstime-datetime\"-createdat-or","type":"code","content":"<time datetime=\"{{ createdAt | date }}\">\n  {{ createdAt | date('HUMAN_DATE') }}\n</time>\n","description":"Date","section":"Plugins"},{"url":"/plugins/date/#on-register-the-value-you-can","type":"paragraph","content":"On register the value you can edit or add more formats under a name, so it's\nmore easy to apply them in the templates:","description":"Date","section":"Plugins"},{"url":"/plugins/date/#import-date-from-1","type":"code","content":"import date from \"lume/plugins/date.ts\";\n\nsite.use(date({\n  formats: {\n    \"MY_FORMAT\": \"MM-dd-yyyy\",\n  },\n}));\n","description":"Date","section":"Plugins"},{"url":"/plugins/date/#now-you-can-use-this-format-by","type":"paragraph","content":"Now you can use this format by its name:","description":"Date","section":"Plugins"},{"url":"/plugins/date/#lesstimegreater-createdat-or-1","type":"code","content":"<time>{{ createdAt | date('MY_FORMAT') }}</time>\n","description":"Date","section":"Plugins"},{"url":"/plugins/date/#locales","type":"heading","content":"Locales","description":"Date","section":"Plugins"},{"url":"/plugins/date/#date-fns-has-support","type":"paragraph","content":"date-fns has support for\nmultiple locales. If you want to\nuse them, just import and register them in _config.js:","description":"Date","section":"Plugins"},{"url":"/plugins/date/#import-date-from-2","type":"code","content":"import date from \"lume/plugins/date.ts\";\nimport gl from \"https://deno.land/x/date_fns@v2.22.1/locale/gl/index.js\";\nimport es from \"https://deno.land/x/date_fns@v2.22.1/locale/es/index.js\";\n\nsite.use(date({\n  locales: { gl, es },\n}));\n","description":"Date","section":"Plugins"},{"url":"/plugins/date/#use-the-second-argument-to-set","type":"paragraph","content":"Use the second argument to set the locale:","description":"Date","section":"Plugins"},{"url":"/plugins/date/#lesstime-datetime\"-createdat-or-1","type":"code","content":"<time datetime=\"{{ createdAt | date }}\">\n  {{ createdAt | date('HUMAN_DATE', 'gl') }}\n</time>\n","description":"Date","section":"Plugins"},{"url":"/plugins/date/#note:-the-first-locale-set-in","type":"paragraph","content":"Note: The first locale set in the _config.js will be used also as the\ndefault locale.","description":"Date","section":"Plugins"},{"url":"/plugins/modify_urls/","type":"page","content":"Modify URLs","section":"Plugins"},{"url":"/plugins/modify_urls/#the-modify_urls-plugin-modifies","type":"paragraph","content":"The modify_urls plugin modifies all URLs in your HTML documents using a\nfunction. It's used internally by other plugins like\nresolve_urls, relative_urls and\nbase_path but you can use it to modify the urls in a different\nway.","description":"Modify URLs","section":"Plugins"},{"url":"/plugins/modify_urls/#to-use-it-just-import-in-the","type":"paragraph","content":"To use it, just import in the _config.js file and create a callback to change\nthe url. For example, let's say we want to convert all urls to lowercase:","description":"Modify URLs","section":"Plugins"},{"url":"/plugins/modify_urls/#import-modifyurls-from","type":"code","content":"import modifyUrls from \"lume/plugins/modify_urls.ts\";\n\nsite.use(modifyUrls({\n  fn: (url) => url.toLowerCase();\n}));\n","description":"Modify URLs","section":"Plugins"},{"url":"/plugins/modify_urls/#the-plugin-will-search-all-urls","type":"paragraph","content":"The plugin will search all urls in your HTML documents (elements with href,\nsrc, srcset and imagesrcset attributes) and invoke the callback for every\nurl found. The callback has two arguments: the url and the Page instance where\nthat url was found.","description":"Modify URLs","section":"Plugins"},{"url":"/plugins/terser/","type":"page","content":"Terser","section":"Plugins"},{"url":"/plugins/terser/#the-terser-plugin-minifies-.js","type":"paragraph","content":"The Terser plugin minifies .js files using the\nTerser minifier. It is disabled by default so to\nenable it you have to import and use it in the _config.js file:","description":"Terser","section":"Plugins"},{"url":"/plugins/terser/#import-terser-from","type":"code","content":"import terser from \"lume/plugins/terser.ts\";\n\nsite.use(terser());\n","description":"Terser","section":"Plugins"},{"url":"/plugins/terser/#to-get-around-compatibility","type":"paragraph","content":"To get around compatibility issues of using NodeJS software in Deno, it uses the\nbrowser version.","description":"Terser","section":"Plugins"},{"url":"/plugins/terser/#it-assumes-that-the-files-to-be","type":"paragraph","content":"It assumes that the files to be minified are modules, and so the module\noption, as well as the compress and mangle options, are by default set to\ntrue. You can override this by passing an options object with the Terser\noptions in an options object in the use function:","description":"Terser","section":"Plugins"},{"url":"/plugins/terser/#import-terser-from-1","type":"code","content":"import terser from \"lume/plugins/terser.ts\";\n\nsite.use(terser({\n  options: {\n    module: false,\n  },\n}));\n","description":"Terser","section":"Plugins"},{"url":"/plugins/terser/#other-minification-options-can","type":"paragraph","content":"Other minification options can also be set, but those relating to the filesystem\ncannot. Minified files are given the same name as the input file in the same\ndirectory structure. Note too that options apply to all files; you cannot use\ndifferent options for some files and not for others.","description":"Terser","section":"Plugins"},{"url":"/plugins/terser/#source-maps-can-be-produced-by","type":"paragraph","content":"Source maps can be produced by passing sourceMap: true as a top-level option.\nThis will create a source map in the same directory as the file with .map\nappended to the file name.","description":"Terser","section":"Plugins"},{"url":"/plugins/terser/#the-terser-filter","type":"heading","content":"The terser filter","description":"Terser","section":"Plugins"},{"url":"/plugins/terser/#in-addition-to-the-javascript","type":"paragraph","content":"In addition to the javascript loader and processor, this plugin register also\nthe terser filter so you can transform javascript code in the template\nengines. For example:","description":"Terser","section":"Plugins"},{"url":"/plugins/terser/#percent-set-js-percent","type":"code","content":"{% set js %}\n  console.log(\"Hello, the JavaScript world!\");\n{% endset %}\n\n<script type=\"module\">\n  {{- js | terser | safe -}}\n</script>\n","description":"Terser","section":"Plugins"},{"url":"/plugins/pug/","type":"page","content":"Pug","section":"Plugins"},{"url":"/plugins/pug/#pug-is-a-template-engine","type":"paragraph","content":"Pug is a template engine heavily influenced by Haml. This\nformat is disabled by default, so you have to enable it in the _config.js\nfile:","description":"Pug","section":"Plugins"},{"url":"/plugins/pug/#import-pug-from","type":"code","content":"import pug from \"lume/plugins/pug.ts\";\n\nsite.use(pug());\n","description":"Pug","section":"Plugins"},{"url":"/plugins/pug/#add-a-file-with-.pug-extension","type":"paragraph","content":"Add a file with .pug extension in the _includes directory. Use the front\nmatter to set data to the template.","description":"Pug","section":"Plugins"},{"url":"/plugins/pug/#-title:-welcome-to-my","type":"code","content":"---\ntitle: Welcome to my page\nintro: This is my first post using lume, I hope you like it!\n---\n\ndoctype html\nhtml\n  head\n    title= title\n\n  body\n    include partials/nav.pug\n\n    p= title\n","description":"Pug","section":"Plugins"},{"url":"/plugins/pug/#note-that-the-paths-passed-to","type":"paragraph","content":"Note that the paths passed to include are relative to _includes directory.","description":"Pug","section":"Plugins"},{"url":"/plugins/pug/#creating-pages-is-the-same-as","type":"paragraph","content":"Creating pages is the same as creating layouts, just place the .pug file\noutside the _includes directory.","description":"Pug","section":"Plugins"},{"url":"/plugins/bundler/","type":"page","content":"Bundler","section":"Plugins"},{"url":"/plugins/bundler/#the-plugin-bundler-is-disabled","type":"paragraph","content":"The plugin Bundler is disabled by default so to enable it you have to import\nand use it in the _config.js file:","description":"Bundler","section":"Plugins"},{"url":"/plugins/bundler/#import-bundler-from","type":"code","content":"import bundler from \"lume/plugins/bundler.ts\";\n\nsite.use(bundler());\n","description":"Bundler","section":"Plugins"},{"url":"/plugins/bundler/#it-process-your-javascript-and","type":"paragraph","content":"It process your Javascript and Typescript files using the\nbundler provided by Deno.","description":"Bundler","section":"Plugins"},{"url":"/plugins/bundler/#this-plugin-works-differently","type":"paragraph","content":"This plugin works differently depending on the configuration. The available\noptions are:","description":"Bundler","section":"Plugins"},{"url":"/plugins/bundler/#sourcemap:-set-true-to-generate","type":"list","content":"sourceMap: Set true to generate a source map file that will be saved in\nthe same place but with the .map extension appended. For example, the file\nmy/script.js will generate the sourcemap file my/script.js.map.","description":"Bundler","section":"Plugins"},{"url":"/plugins/bundler/#options:-the-options-available","type":"list","content":"options: The options available in\nDeno.EmitOptions","description":"Bundler","section":"Plugins"},{"url":"/plugins/bundler/#by-default-it-loads-all-.js-and","type":"paragraph","content":"By default it loads all .js and .ts files and transpile the Typescript to\nJavascript. To use TSX or JSX, change the file extensions:","description":"Bundler","section":"Plugins"},{"url":"/plugins/bundler/#site.use(bundler(","type":"code","content":"site.use(bundler({\n  extensions: [\".tsx\", \".ts\"], // Transpile all .tsx and .ts files to typescript\n}));\n","description":"Bundler","section":"Plugins"},{"url":"/plugins/bundler/#if-you-want-to-bundle-the-code","type":"paragraph","content":"If you want to bundle the code and generate only one file, you must do the\nfollowing:","description":"Bundler","section":"Plugins"},{"url":"/plugins/bundler/#load-only-the-main-files-that","type":"list","content":"Load only the main files that you want to bundle. These files must be visible\nby Lume but not their imports. You can use site.ignore() to ignore the\nother files or save them in a subfolder starting with _ (for example:\n_components).","description":"Bundler","section":"Plugins"},{"url":"/plugins/bundler/#configure-the-plugin-to-bundle","type":"list","content":"Configure the plugin to bundle the code:","description":"Bundler","section":"Plugins"},{"url":"/plugins/bundler/#site.use(bundler(-1","type":"code","content":"site.use(bundler({\n  extensions: [\".tsx\", \".ts\"], // Transpile all .tsx and .ts files to typescript\n  options: {\n    bundle: \"module\", // Include all dependencies in the files\n  },\n}));\n","description":"Bundler","section":"Plugins"},{"url":"/plugins/bundler/#typescript-for-the-browser","type":"heading","content":"Typescript for the browser","description":"Bundler","section":"Plugins"},{"url":"/plugins/bundler/#when-bundling-.ts-files-to-run","type":"paragraph","content":"When bundling .ts files to run in the browser, use a triple slash reference to\ninclude helpful libraries, like dom in your scripts. For example,","description":"Bundler","section":"Plugins"},{"url":"/plugins/bundler/#lessreference-lib\"dom\"","type":"code","content":"/// <reference lib=\"dom\" />\n\ndocument.getElementById(\"foo\");\n","description":"Bundler","section":"Plugins"},{"url":"/plugins/bundler/#this-will-help-deno-and-your","type":"paragraph","content":"This will help Deno and your code editor to Bundle into JS appropriately.","description":"Bundler","section":"Plugins"},{"url":"/plugins/postcss/","type":"page","content":"PostCSS","section":"Plugins"},{"url":"/plugins/postcss/#the-postcss-plugin-load-and","type":"paragraph","content":"The PostCSS plugin load and transform your CSS files using\nPostCSS processor. This plugin is disabled by\ndefault so to enable it you have to import and use it in the _config.js\nfile:","description":"PostCSS","section":"Plugins"},{"url":"/plugins/postcss/#import-postcss-from","type":"code","content":"import postcss from \"lume/plugins/postcss.ts\";\n\nsite.use(postcss());\n","description":"PostCSS","section":"Plugins"},{"url":"/plugins/postcss/#extensions:-array-with-the","type":"list","content":"extensions: Array with the extensions of the files that this plugin will\nload. By default is [\".css\"].","description":"PostCSS","section":"Plugins"},{"url":"/plugins/postcss/#plugins:-array-with-the-postcss","type":"list","content":"plugins: Array with the PostCSS plugins that you want to use.","description":"PostCSS","section":"Plugins"},{"url":"/plugins/postcss/#keepdefaultplugins:-set-true-to","type":"list","content":"keepDefaultPlugins: Set true to append your plugins to the defaults,\ninstead of replacing them.","description":"PostCSS","section":"Plugins"},{"url":"/plugins/postcss/#sourcemap:-set-true-to-generate","type":"list","content":"sourceMap: Set true to generate the source map that will be inlined in the\ncss file. To generate the source map in a different file, set\nsourceMap: { inline: false }.","description":"PostCSS","section":"Plugins"},{"url":"/plugins/postcss/#includes:-an-array-of","type":"list","content":"includes: An array of directories to search for the @imported files. By\ndefault is _includes. Set false to disable it.","description":"PostCSS","section":"Plugins"},{"url":"/plugins/postcss/#postcss-plugins","type":"heading","content":"PostCSS Plugins","description":"PostCSS","section":"Plugins"},{"url":"/plugins/postcss/#postcss-uses-the-following","type":"paragraph","content":"PostCSS uses the following plugins by default:","description":"PostCSS","section":"Plugins"},{"url":"/plugins/postcss/#postcss-nesting-to-give","type":"list","content":"postcss-nesting to give support\nto nested rules.","description":"PostCSS","section":"Plugins"},{"url":"/plugins/postcss/#postcss_autoprefixer-to","type":"list","content":"postcss_autoprefixer to add\nautomatically the vendor prefixes.","description":"PostCSS","section":"Plugins"},{"url":"/plugins/postcss/#use-the-property-plugins-to","type":"paragraph","content":"Use the property plugins to replace them. For example, to use the\nfont-format-keywords plugin:","description":"PostCSS","section":"Plugins"},{"url":"/plugins/postcss/#import-postcss-from-1","type":"code","content":"import postcss from \"lume/plugins/postcss.ts\";\nimport postcssFontFormatKeywords from \"https://deno.land/x/postcss_font_format_keywords/mod.js\";\n\nsite.use(postcss({\n  plugins: [postcssFontFormatKeywords()],\n}));\n","description":"PostCSS","section":"Plugins"},{"url":"/plugins/postcss/#this-will-override-the-default","type":"paragraph","content":"This will override the default plugins with yours. If you only want to add more\nplugins without remove the defaults, use the keepDefaultPlugins option:","description":"PostCSS","section":"Plugins"},{"url":"/plugins/postcss/#add-more-postcss-plugins","type":"code","content":"// Add more postcss plugins without override the defaults\nsite.use(postcss({\n  plugins: [postcssFontFormatKeywords()],\n  keepDefaultPlugins: true,\n}));\n","description":"PostCSS","section":"Plugins"},{"url":"/plugins/postcss/#includes","type":"heading","content":"Includes","description":"PostCSS","section":"Plugins"},{"url":"/plugins/postcss/#in-addition-to-the-default","type":"paragraph","content":"In addition to the default plugins, PostCSS use also\npostcss-import, to inline the local\n@imports looking in the _includes directory.","description":"PostCSS","section":"Plugins"},{"url":"/plugins/postcss/#*-import-the-css-file-from","type":"code","content":"/* Import the CSS file from _includes/css/reset.css */\n@import \"css/reset.css\";\n\n/* Import the relative CSS file */\n@import \"./variables.css\";\n","description":"PostCSS","section":"Plugins"},{"url":"/plugins/postcss/#for-convenience-this-plugin","type":"paragraph","content":"For convenience, this plugin won't be removed with your plugins (even if\nkeepDefaultPlugins is set to false). But you can change the _includes\ndirectory or disable completelly with the includes option:","description":"PostCSS","section":"Plugins"},{"url":"/plugins/postcss/#change-the-includes-folder","type":"code","content":"// Change the includes folder of CSS to _styles\nsite.use(postcss({\n  includes: \"_styles\",\n}));\n","description":"PostCSS","section":"Plugins"},{"url":"/plugins/postcss/#disable-the-includes-(the","type":"code","content":"// Disable the includes (the local @import's won't be inlined)\nsite.use(postcss({\n  includes: false,\n}));\n","description":"PostCSS","section":"Plugins"},{"url":"/plugins/postcss/#the-postcss-filter","type":"heading","content":"The postcss filter","description":"PostCSS","section":"Plugins"},{"url":"/plugins/postcss/#this-plugin-also-register-the","type":"paragraph","content":"This plugin also register the postcss filter so you can transform css code in\nthe template engines. For example:","description":"PostCSS","section":"Plugins"},{"url":"/plugins/postcss/#percent-set-css-percent-body::after","type":"code","content":"{% set css %}\n  body::after {\n    content: \"Hello, the CSS world!\";\n  }\n{% endset %}\n\n<style>\n  {{- css | postcss | safe -}}\n</style>\n","description":"PostCSS","section":"Plugins"},{"url":"/plugins/resolve_urls/","type":"page","content":"Resolve URLs","section":"Plugins"},{"url":"/plugins/resolve_urls/#the-resolve_urls-plugin","type":"paragraph","content":"The resolve_urls plugin converts all URLs in your HTML documents matching with\nany file in the src folder with the final url. It is disabled by default\nso to enable it you have to import and use it in the _config.js file:","description":"Resolve URLs","section":"Plugins"},{"url":"/plugins/resolve_urls/#import-resolveurls-from","type":"code","content":"import resolveUrls from \"lume/plugins/resolve_urls.ts\";\n\nsite.use(resolveUrls());\n","description":"Resolve URLs","section":"Plugins"},{"url":"/plugins/resolve_urls/#for-example-the-following-link","type":"paragraph","content":"For example, the following link is pointing to a markdown file:","description":"Resolve URLs","section":"Plugins"},{"url":"/plugins/resolve_urls/#go-to-lessa","type":"code","content":"Go to <a href=\"/about-us.md\">About us</a>\n","description":"Resolve URLs","section":"Plugins"},{"url":"/plugins/resolve_urls/#the-pluging-replaces-the","type":"paragraph","content":"The pluging replaces the markdown file with the final url.","description":"Resolve URLs","section":"Plugins"},{"url":"/plugins/resolve_urls/#go-to-lessa-1","type":"code","content":"Go to <a href=\"/about-us/\">About us</a>\n","description":"Resolve URLs","section":"Plugins"},{"url":"/plugins/resolve_urls/#if-the-page-about-us.md-has-a","type":"paragraph","content":"If the page about-us.md has a different url (because has a\nurl variable in the front\nmatter), this plugin will use it accordingly. It also can be used for static\nfiles that change the output directory.","description":"Resolve URLs","section":"Plugins"},{"url":"/plugins/resolve_urls/#the-plugin-also-resolves","type":"paragraph","content":"The plugin also resolves relative urls (like ../about-us.md) and keep any\nanchor or search query in the url (for example: /about-us.md#contact is\nreplaced with /about-us/#contact).","description":"Resolve URLs","section":"Plugins"},{"url":"/plugins/resolve_urls/#a-very-common-use-case-is-a","type":"paragraph","content":"A very common use case is a repository with documentation content in markdown\nfiles. You may want the links to work in GitHub, but on build the HTML site they\nchange to the final urls.","description":"Resolve URLs","section":"Plugins"},{"url":"/plugins/svgo/","type":"page","content":"SVGO","section":"Plugins"},{"url":"/plugins/svgo/#the-plugin-svg-is-disabled-by","type":"paragraph","content":"The plugin SVG is disabled by default so to enable it you have to import and\nuse it in the _config.js file:","description":"SVGO","section":"Plugins"},{"url":"/plugins/svgo/#import-svgo-from","type":"code","content":"import svgo from \"lume/plugins/svgo.ts\";\n\nsite.use(svgo());\n","description":"SVGO","section":"Plugins"},{"url":"/plugins/svgo/#this-plugin-load-.svg-files-and","type":"paragraph","content":"This plugin load .svg files and optimize them using\nSVGO","description":"SVGO","section":"Plugins"},{"url":"/plugins/attributes/","type":"page","content":"Attributes","section":"Plugins"},{"url":"/plugins/attributes/#this-plugin-is-disabled-by","type":"paragraph","content":"This plugin is disabled by default so to enable it, you have to edit your\n_config.js file:","description":"Attributes","section":"Plugins"},{"url":"/plugins/attributes/#import-lume-from","type":"code","content":"import lume from \"lume/mod.ts\";\nimport attributes from \"lume/plugins/attributes.ts\";\n\nconst site = lume();\n\nsite.use(attributes());\n","description":"Attributes","section":"Plugins"},{"url":"/plugins/attributes/#the-attributes-plugin-register","type":"paragraph","content":"The attributes plugin register two template filters to normalize the\nattributes of your HTML. The included filters are:","description":"Attributes","section":"Plugins"},{"url":"/plugins/attributes/#attr","type":"heading","content":"attr","description":"Attributes","section":"Plugins"},{"url":"/plugins/attributes/#provide-a-convenient-way-to","type":"paragraph","content":"Provide a convenient way to work with HTML attributes.","description":"Attributes","section":"Plugins"},{"url":"/plugins/attributes/#-link:-title:-go-to","type":"code","content":"---\nlink:\n  title: Go to GitHub\n  href: https://github.com\n  target: _blank\n---\n\n<a {{ link | attr | safe }}>\n","description":"Attributes","section":"Plugins"},{"url":"/plugins/attributes/#you-can-also-filter-the","type":"paragraph","content":"You can also filter the attributes names:","description":"Attributes","section":"Plugins"},{"url":"/plugins/attributes/#-link:-text:-go-to-github","type":"code","content":"---\nlink:\n  text: Go to GitHub\n  href: https://github.com\n  target: _blank\n  noopen: true\n  class:\n    - link\n    - link-external\n---\n\n<a {{ link | attr('href', 'target', 'noopen', 'class') | safe }}>\n  {{ link.text }}\n</a>\n","description":"Attributes","section":"Plugins"},{"url":"/plugins/attributes/#class","type":"heading","content":"class","description":"Attributes","section":"Plugins"},{"url":"/plugins/attributes/#to-work-with-html-class","type":"paragraph","content":"To work with HTML class names:","description":"Attributes","section":"Plugins"},{"url":"/plugins/attributes/#-styles:-btn-","type":"code","content":"---\nstyles:\n  - btn\n  - btn-primary\n---\n\n<a class=\"{{ styles | class }}\">\n","description":"Attributes","section":"Plugins"},{"url":"/plugins/attributes/#you-can-use-objects-to","type":"paragraph","content":"You can use objects to enable/disable classes:","description":"Attributes","section":"Plugins"},{"url":"/plugins/attributes/#-styles:-btn:-true","type":"code","content":"---\nstyles:\n  btn: true\n  btn-primary: true\n  is-disabled: false\n---\n\n<a class=\"{{ styles | class }}\">\n","description":"Attributes","section":"Plugins"},{"url":"/plugins/eta/","type":"page","content":"Eta","section":"Plugins"},{"url":"/plugins/eta/#eta-is-a-javascript-template","type":"paragraph","content":"Eta is a JavaScript template engine with a syntax very\nsimilar to EJS but with\nsome differences. This format is\ndisabled by default, so you have to enable it in the _config.js file:","description":"Eta","section":"Plugins"},{"url":"/plugins/eta/#import-eta-from","type":"code","content":"import eta from \"lume/plugins/eta.ts\";\n\nsite.use(eta());\n","description":"Eta","section":"Plugins"},{"url":"/plugins/eta/#add-a-file-with-.eta-extension","type":"paragraph","content":"Add a file with .eta extension in the _includes directory. Use the front\nmatter to set data to the template.","description":"Eta","section":"Plugins"},{"url":"/plugins/eta/#-title:-welcome-to-my","type":"code","content":"---\ntitle: Welcome to my page\nintro: This is my first post using lume, I hope you like it!\n---\n\n<html>\n  <head>\n    <title><%= title %></title>\n  </head>\n\n  <body>\n    <%~ includeFile(\"partials/nav.eta\") %>\n\n    <p><%= title %></p>\n  </body>\n</html>\n","description":"Eta","section":"Plugins"},{"url":"/plugins/eta/#note-that-the-paths-passed-to","type":"paragraph","content":"Note that the paths passed to includeFile() function are always relative to\n_includes directory.","description":"Eta","section":"Plugins"},{"url":"/plugins/eta/#creating-pages-is-the-same-as","type":"paragraph","content":"Creating pages is the same as creating layouts, just place the .eta file\noutside the _includes directory.","description":"Eta","section":"Plugins"},{"url":"/plugins/code_highlight/","type":"page","content":"Code Highlight","section":"Plugins"},{"url":"/plugins/code_highlight/#this-plugin-uses-the","type":"paragraph","content":"This plugin uses the highlight.js library to search\nand highlight the syntax code of any <pre><code> element. It is disabled by\ndefault so to enable it you have to import and use it in the _config.js\nfile:","description":"Code Highlight","section":"Plugins"},{"url":"/plugins/code_highlight/#import-codehighlight-from","type":"code","content":"import codeHighlight from \"lume/plugins/code_highlight.ts\";\n\nsite.use(codeHighlight());\n","description":"Code Highlight","section":"Plugins"},{"url":"/plugins/code_highlight/#see-the-highlight.js-docs-for","type":"paragraph","content":"See the\nhighlight.js docs\nfor available config options. Example:","description":"Code Highlight","section":"Plugins"},{"url":"/plugins/code_highlight/#import-codehighlight-from-1","type":"code","content":"import codeHighlight from \"lume/plugins/code_highlight.ts\";\n\nsite.use(codeHighlight({\n  options: {\n    classPrefix: \"syntax-\",\n  },\n}));\n","description":"Code Highlight","section":"Plugins"},{"url":"/plugins/base_path/","type":"page","content":"Base path","section":"Plugins"},{"url":"/plugins/base_path/#the-base_path-plugin-fixes-all","type":"paragraph","content":"The base_path plugin fixes all URLs in your HTML documents by prepending the\npath of the location setting. It's\nuseful if your site is hosted in a subdirectory and you don't want to use the\nurl filter everywhere.","description":"Base path","section":"Plugins"},{"url":"/plugins/base_path/#this-plugin-is-disabled-by","type":"paragraph","content":"This plugin is disabled by default so to enable it you have to import and\nuse it in the _config.js. After that, any element with the attribute href,\nsrc, srcset and imagesrcset will be automatically fixed.","description":"Base path","section":"Plugins"},{"url":"/plugins/base_path/#import-lume-from","type":"code","content":"import lume from \"lume/mod.ts\";\nimport basePath from \"lume/plugins/base_path.ts\";\n\nconst site = lume({\n  location: new URL(\"https://my-site.com/blog/\"), // ← Note the path /blog/\n});\n\nsite.use(basePath());\n","description":"Base path","section":"Plugins"},{"url":"/plugins/base_path/#all-absolute-urls-of-your-site","type":"paragraph","content":"All absolute URLs of your site will be fixed. For example:","description":"Base path","section":"Plugins"},{"url":"/plugins/base_path/#lessa","type":"code","content":"<a href=\"/articles/my-second-article/\">Go to the second article</a>\n","description":"Base path","section":"Plugins"},{"url":"/plugins/base_path/#the-base_path-plugin-will","type":"paragraph","content":"The base_path plugin will convert this HTML code to:","description":"Base path","section":"Plugins"},{"url":"/plugins/base_path/#lessa-1","type":"code","content":"<a href=\"/blog/articles/my-second-article/\">Go to the second article</a>\n","description":"Base path","section":"Plugins"},{"url":"/plugins/jsx/","type":"page","content":"JSX","section":"Plugins"},{"url":"/plugins/jsx/#jsx-(or-the-equivalent-tsx-for","type":"paragraph","content":"JSX (or the equivalent TSX for TypeScript) is\na template language to create and render HTML code, very popular in some\nframeworks, like React. This format is disabled by default so you have to\nenable it by using the JSX plugin in the _config.js file:","description":"JSX","section":"Plugins"},{"url":"/plugins/jsx/#import-jsx-from","type":"code","content":"import jsx from \"lume/plugins/jsx.ts\";\n\nsite.use(jsx());\n","description":"JSX","section":"Plugins"},{"url":"/plugins/jsx/#to-create-a-page-with-this","type":"paragraph","content":"To create a page with this format, just add a file with .jsx or .tsx\nextension to your site. This format works exactly the same as\nJavaScript/TypeScript files, but with the addition of you\ncan export JSX code in the default export:","description":"JSX","section":"Plugins"},{"url":"/plugins/jsx/#export-const-title-\"welcome","type":"code","content":"export const title = \"Welcome to my page\";\nexport const layout = \"layouts/main.njk\";\n\nexport default (data) =>\n  <h1>{ data.title }</h1>\n  <p>This is my first post using lume. I hope you like it!</p>\n","description":"JSX","section":"Plugins"},{"url":"/plugins/jsx/#note-that-this-page-uses-the","type":"paragraph","content":"Note that this page uses the layouts/main.njk layout to wrap the content (you\ncan mix different template languages like Nunjucks and JSX)","description":"JSX","section":"Plugins"},{"url":"/plugins/jsx/#to-create-layouts-in-jsx-just","type":"paragraph","content":"To create layouts in JSX, just add .jsx or .tsx files to the _includes\ndirectory. Note that we need to use the variable children to render the page\ncontent instead of content. The difference is that content is a string and\ncannot be easily used in JSX because it's escaped, and children is the JSX\nobject un-rendered.","description":"JSX","section":"Plugins"},{"url":"/plugins/jsx/#export-default-(-children-)","type":"code","content":"export default ({ children }) => (\n  <html>\n    <head>\n      <title>{title}</title>\n    </head>\n    <body>\n      {children}\n    </body>\n  </html>\n);\n","description":"JSX","section":"Plugins"},{"url":"/plugins/parcel_css/","type":"page","content":"ParcelCSS","section":"Plugins"},{"url":"/plugins/parcel_css/#the-parcelcss-plugin-load-and","type":"paragraph","content":"The ParcelCSS plugin load and transform your CSS files using\nParcelCSS processor. This plugin\nis disabled by default so to enable it you have to import and use it in the\n_config.js file:","description":"ParcelCSS","section":"Plugins"},{"url":"/plugins/parcel_css/#import-parcelcss-from","type":"code","content":"import parcelCSS from \"lume/plugins/parcel_css.ts\";\n\nsite.use(parcelCSS());\n","description":"ParcelCSS","section":"Plugins"},{"url":"/plugins/parcel_css/#extensions:-array-with-the","type":"list","content":"extensions: Array with the extensions of the files that this plugin will\nload. By default is [\".css\"]. instead of replacing them.","description":"ParcelCSS","section":"Plugins"},{"url":"/plugins/parcel_css/#sourcemap:-set-true-to-generate","type":"list","content":"sourceMap: Set true to generate a source map file that will be saved in\nthe same place but with the .map extension appended. For example, the file\nmy/styles.css will generate the sourcemap file my/styles.css.map.","description":"ParcelCSS","section":"Plugins"},{"url":"/plugins/parcel_css/#options:-an-object-with-the","type":"list","content":"options: An object with the options for parcel-css.","description":"ParcelCSS","section":"Plugins"},{"url":"/plugins/parcel_css/#example-with-the-default","type":"paragraph","content":"Example with the default configuration:","description":"ParcelCSS","section":"Plugins"},{"url":"/plugins/parcel_css/#site.use(parcelcss(","type":"code","content":"site.use(parcelCSS({\n  extensions: [\".css\"],\n  sourceMap: false,\n  options: {\n    minify: true,\n    drafts: {\n      nesting: true,\n      customMedia: true,\n    },\n    targets: {\n      android: 98,\n      chrome: 98,\n      edge: 98,\n      firefox: 97,\n      ios_saf: 15,\n      safari: 15,\n      opera: 83,\n      samsung: 16,\n    }\n  },\n}));\n","description":"ParcelCSS","section":"Plugins"},{"url":"/core/markdown/","type":"page","content":"Markdown","section":"Core"},{"url":"/core/markdown/#markdown-is-a-popular-markup","type":"paragraph","content":"Markdown is a popular markup language\nto write content that is converted to HTML. This format is enabled by\ndefault and is useful for pages with long text like posts or articles.","description":"Markdown","section":"Core"},{"url":"/core/markdown/#creating-pages-in-markdown","type":"heading","content":"Creating pages in Markdown","description":"Markdown","section":"Core"},{"url":"/core/markdown/#to-create-a-page-using","type":"paragraph","content":"To create a page using Markdown, just add a file with .md extension to your\nsite. You can also add extra variables by including a front matter, a block\ndelimited by two triple-dashed lines with YAML code:","description":"Markdown","section":"Core"},{"url":"/core/markdown/#-title:-welcome-to-my","type":"code","content":"---\ntitle: Welcome to my page\nlayout: layouts/main.njk\n---\n\n# Welcome\n\n**This is my first post** using lume\nI hope you like it!\n","description":"Markdown","section":"Core"},{"url":"/core/markdown/#the-markdown-code-is-stored-in","type":"paragraph","content":"The Markdown code is stored in the content variable:","description":"Markdown","section":"Core"},{"url":"/core/markdown/#lesshtmlgreater-lessheadgreater-lesstitlegreater","type":"code","content":"<html>\n  <head>\n    <title>{{ title }}</title>\n  </head>\n  <body>\n    {{ content | safe }}\n  </body>\n</html>\n","description":"Markdown","section":"Core"},{"url":"/core/markdown/#md-filter","type":"heading","content":"md filter","description":"Markdown","section":"Core"},{"url":"/core/markdown/#the-markdown-plugin-also","type":"paragraph","content":"The Markdown plugin also register the md filter that renders any string value\nas Markdown and output a HTML. The filter also accepts an argument to render the\nMarkdown in inline mode.","description":"Markdown","section":"Core"},{"url":"/core/markdown/#less!-render-to-html-code","type":"code","content":"<!-- Render to HTML code -->\n<div>{{ text | md }}<div>\n\n<!-- Single line rendering, without the paragraph wrap: -->\n<p>{{ text | md(true) }}<p>\n","description":"Markdown","section":"Core"},{"url":"/core/markdown/#configure-the-markdown-plugin","type":"heading","content":"Configure the Markdown plugin","description":"Markdown","section":"Core"},{"url":"/core/markdown/#in-_config.ts-the-second","type":"paragraph","content":"In _config.ts, the second argument of lume() is used to configure the\nplugins that are enabled by default (like this!). Use it to configure the\nmarkdown plugin.","description":"Markdown","section":"Core"},{"url":"/core/markdown/#import-lume-from","type":"code","content":"import lume from \"lume/mod.ts\";\n\n// Markdown plugin configuration\nconst markdown = {};\n\n// Apply the plugin config\nconst site = lume({}, { markdown });\n","description":"Markdown","section":"Core"},{"url":"/core/markdown/#lume-uses-markdown-it-as","type":"paragraph","content":"Lume uses markdown-it as the\nmarkdown parser, with the following plugins enabled:","description":"Markdown","section":"Core"},{"url":"/core/markdown/#markdown-it-deflist-to-add","type":"list","content":"markdown-it-deflist to\nadd support for definition lists (<dl> tag).","description":"Markdown","section":"Core"},{"url":"/core/markdown/#markdown-it-attrs-to-add","type":"list","content":"markdown-it-attrs to add support\nfor CSS classes and other attributes using {}.","description":"Markdown","section":"Core"},{"url":"/core/markdown/#use-the-property-plugins-to","type":"paragraph","content":"Use the property plugins to replace them. For example, to add the\nmarkdown-it-anchor\nplugin:","description":"Markdown","section":"Core"},{"url":"/core/markdown/#import-anchor-from","type":"code","content":"import anchor from \"https://jspm.dev/markdown-it-anchor\";\n\n// Set the markdown plugins\nconst markdown = {\n  plugins: [anchor],\n};\n","description":"Markdown","section":"Core"},{"url":"/core/markdown/#add-more-markdown-plugins","type":"code","content":"// Add more markdown plugins without override the defaults\nconst markdown = {\n  plugins: [anchor],\n  keepDefaultPlugins: true,\n};\n","description":"Markdown","section":"Core"},{"url":"/core/markdown/#use-the-options-property-to","type":"paragraph","content":"Use the options property to change the\nmarkdown-it settings:","description":"Markdown","section":"Core"},{"url":"/core/markdown/#change-markdown-it","type":"code","content":"// Change markdown-it configuration\nconst markdown = {\n  options: {\n    breaks: false,\n    xhtmlOut: true,\n  },\n};\n","description":"Markdown","section":"Core"},{"url":"/plugins/other-plugins/","type":"page","content":"Other plugins","section":"Plugins"},{"url":"/plugins/other-plugins/#in-addition-to-built-in","type":"paragraph","content":"In addition to built in plugins,\nthere's a repository with other experimental plugins\nthat can be added to Lume repository at some point, when they are more mature.\nThis collection of plugins include features like Windi CSS integration,\nsupport for SASS, HTML/CSS minifier or integration with esbuild bundler.","description":"Other plugins","section":"Plugins"},{"url":"/plugins/other-plugins/#due-they-are-experimental","type":"paragraph","content":"Due they are experimental plugins, they are not published in deno.land/x but\nyou can use it (at your own risk) importing directly the GitHub file:","description":"Other plugins","section":"Plugins"},{"url":"/plugins/other-plugins/#import-lume-from","type":"code","content":"import lume from \"lume/mod.ts\";\nimport esbuild from \"https://raw.githubusercontent.com/lumeland/experimental-plugins/main/esbuild/esbuild.ts\";\n\nconst site = lume();\n\n// Enable the esbuild plugin\nsite.use(esbuild());\n\nexport default site;\n","description":"Other plugins","section":"Plugins"},{"url":"/plugins/other-plugins/#have-you-created-a-plugin-for-lume%3F","type":"heading","content":"Have you created a plugin for Lume?","description":"Other plugins","section":"Plugins"},{"url":"/plugins/other-plugins/#please-let-me-know-and-i'll","type":"paragraph","content":"Please let me know and I'll include here. See the documentation\nto create your own plugins.","description":"Other plugins","section":"Plugins"},{"url":"/core/json/","type":"page","content":"JSON","section":"Core"},{"url":"/core/json/#json-files-are-useful-to-store","type":"paragraph","content":"JSON files are useful to store data not written by humans (for example APIs).\nThis format is enabled as default so you can create .json files to store data\nor create pages.","description":"JSON","section":"Core"},{"url":"/core/json/#creating-_data-files","type":"heading","content":"Creating _data files","description":"JSON","section":"Core"},{"url":"/core/json/#create-_data.json-or","type":"paragraph","content":"Create _data.json or _data/*.json files to save common variables.","description":"JSON","section":"Core"},{"url":"/core/json/#creating-pages-in-json","type":"heading","content":"Creating pages in JSON","description":"JSON","section":"Core"},{"url":"/core/json/#it's-possible-to-create-pages","type":"paragraph","content":"It's possible to create pages using JSON format. To do that, create a file with\nthe extension .tmpl.json (the .tmpl subextension is required to\ndifferentiate these pages from other json files that you can include in your\nsite).","description":"JSON","section":"Core"},{"url":"/core/json/#\"title\":-\"welcome-to-my","type":"code","content":"{\n  \"title\": \"Welcome to my page\",\n  \"layout\": \"layouts/main.njk\",\n  \"content\": \"This is my first post using lume,\\nI hope you like it!\"\n}\n","description":"JSON","section":"Core"},{"url":"/core/json/#configure-the-json-plugin","type":"heading","content":"Configure the JSON plugin","description":"JSON","section":"Core"},{"url":"/core/json/#in-_config.ts-the-second","type":"paragraph","content":"In _config.ts, the second argument of lume() is used to configure the\nplugins that are enabled by default (like this!). Use it to configure the JSON\nplugin.","description":"JSON","section":"Core"},{"url":"/core/json/#for-example-to-use-a-different","type":"paragraph","content":"For example, to use a different extension than .tmpl.json to generate pages,\nedit the pageExtensions property:","description":"JSON","section":"Core"},{"url":"/core/json/#import-lume-from","type":"code","content":"import lume from \"lume/mod.ts\";\n\n// JSON plugin configuration\nconst json = {\n  pagesExtensions: [\".page.json\"],\n};\n\n// Apply the plugin config\nconst site = lume({}, { json });\n","description":"JSON","section":"Core"},{"url":"/core/modules/","type":"page","content":"Modules","section":"Core"},{"url":"/core/modules/#because-lume-is-built-for-deno","type":"paragraph","content":"Because Lume is built for Deno, it has native support for JavaScript and\nTypeScript modules. These two formats are enabled by default.","description":"Modules","section":"Core"},{"url":"/core/modules/#create-_data.js-or-_data*.js","type":"paragraph","content":"Create _data.js or _data/*.js (or the TypeScript equivalent _data.ts or\n_data/*.ts) files to save shared data.","description":"Modules","section":"Core"},{"url":"/core/modules/#export-const-users","type":"code","content":"export const users = [\n  {\n    name: \"Oscar\",\n    surname: \"Otero\",\n  },\n  {\n    name: \"Michael\",\n    surname: \"Jackson\",\n  },\n];\n","description":"Modules","section":"Core"},{"url":"/core/modules/#to-create-pages-using","type":"paragraph","content":"To create pages using JavaScript or TypeScript, create a file with the extension\n.tmpl.js or .tmpl.ts (the .tmpl subextension is required to differentiate\nJavascript/Typescript files that generate HTML pages from other JavaScript files\nto be executed in the browser). To export the variables, use named exports and\nto export the main content you can use the default export.","description":"Modules","section":"Core"},{"url":"/core/modules/#export-const-title-\"welcome","type":"code","content":"export const title = \"Welcome to my page\";\nexport const layout = \"layouts/main.njk\";\n\nexport default \"This is my first post using lume. I hope you like it!\";\n","description":"Modules","section":"Core"},{"url":"/core/modules/#the-default-export-can-be-a","type":"paragraph","content":"The default export can be a function, so it will be executed passing all the\navailable data in the first argument and the filters in the second argument:","description":"Modules","section":"Core"},{"url":"/core/modules/#export-const-title-\"welcome-1","type":"code","content":"export const title = \"Welcome to my page\";\nexport const layout = \"layouts/main.njk\";\n\nexport default (data, filters) =>\n  `<h1>${data.title}</h1>\n  <p>This is my first post using lume. I hope you like it!</p>\n  <a href=\"${filters.url(\"/\")}\">Back to home</a>`;\n","description":"Modules","section":"Core"},{"url":"/core/modules/#javascripttypescript-allows-to","type":"paragraph","content":"JavaScript/TypeScript allows to generate multiple pages from the same file, see\nPagination for more info.","description":"Modules","section":"Core"},{"url":"/core/modules/#it's-possible-to-create-layouts","type":"paragraph","content":"It's possible to create layouts using JavaScript/TypeScript. Just create\n.tmpl.js or .tmpl.ts files inside the _includes directory.","description":"Modules","section":"Core"},{"url":"/core/modules/#export-default-(-title","type":"code","content":"export default ({ title, content }, filters) =>\n  `<html>\n    <head>\n      <title>${title}</title>\n    </head>\n    <body>\n      ${content}\n    </body>\n  </html>`;\n","description":"Modules","section":"Core"},{"url":"/core/modules/#configure-the-modules-plugin","type":"heading","content":"Configure the Modules plugin","description":"Modules","section":"Core"},{"url":"/core/modules/#in-_config.ts-the-second","type":"paragraph","content":"In _config.ts, the second argument of lume() is used to configure the\nplugins that are enabled by default (like this!). Use it to configure the\nModules plugin.","description":"Modules","section":"Core"},{"url":"/core/modules/#for-example-to-use-a-different","type":"paragraph","content":"For example, to use a different extension than .tmpl.js and .tmpl.ts to\ngenerate pages, edit the pageExtensions property:","description":"Modules","section":"Core"},{"url":"/core/modules/#import-lume-from","type":"code","content":"import lume from \"lume/mod.ts\";\n\n// Modules plugin configuration\nconst modules = {\n  pagesExtensions: [\".page.js\", \".page.ts\"],\n};\n\n// Apply the plugin config\nconst site = lume({}, { modules });\n","description":"Modules","section":"Core"},{"url":"/core/nunjucks/","type":"page","content":"Nunjucks","section":"Core"},{"url":"/core/nunjucks/#nunjucks-is-powerful-template","type":"paragraph","content":"Nunjucks is powerful template language\ncreated by Mozilla and inspired by ninja2. This format is enabled by\ndefault and you can use it to create layouts and pages.","description":"Nunjucks","section":"Core"},{"url":"/core/nunjucks/#add-a-file-with-.njk-extension","type":"paragraph","content":"Add a file with .njk extension in the _includes directory. Use the front\nmatter to set data to the template.","description":"Nunjucks","section":"Core"},{"url":"/core/nunjucks/#creating-pages-is-the-same-as","type":"paragraph","content":"Creating pages is the same as creating layouts, just place the .njk file\noutside the _includes directory.","description":"Nunjucks","section":"Core"},{"url":"/core/nunjucks/#njk-filter","type":"heading","content":"njk filter","description":"Nunjucks","section":"Core"},{"url":"/core/nunjucks/#the-nunjucks-plugin-also","type":"paragraph","content":"The Nunjucks plugin also register the njk filter, to render any string value\nas a Nunjucks template and output a HTML. The filter accepts an object with\ndata.","description":"Nunjucks","section":"Core"},{"url":"/core/nunjucks/#-data:-username:","type":"code","content":"---\ndata:\n  username: Oscar\ntext: \"Hello {{ username }}\"\n---\n\n<!-- Render a string -->\n<div>{{ text | njk(data) | safe }}<div>\n","description":"Nunjucks","section":"Core"},{"url":"/core/nunjucks/#configure-the-nunjucks-plugin","type":"heading","content":"Configure the Nunjucks plugin","description":"Nunjucks","section":"Core"},{"url":"/core/nunjucks/#in-_config.ts-the-second","type":"paragraph","content":"In _config.ts, the second argument of lume() is used to configure the\nplugins that are enabled by default (like this!). Use it to configure the\nnunjucks plugin.","description":"Nunjucks","section":"Core"},{"url":"/core/nunjucks/#for-example-let's-configure","type":"paragraph","content":"For example, let's\nconfigure nunjucks and\nchange the default folder of the _includes:","description":"Nunjucks","section":"Core"},{"url":"/core/nunjucks/#nunjucks-plugin","type":"code","content":"// Nunjucks plugin configuration\nconst nunjucks = {\n  includes: \"_layouts\",\n  options: {\n    throwOnUndefined: true,\n  },\n};\n\n// Apply the plugin config\nconst site = lume({}, { nunjucks });\n","description":"Nunjucks","section":"Core"},{"url":"/core/nunjucks/#now-lume-will-search-the-.njk","type":"paragraph","content":"Now, Lume will search the .njk templates in the directory _layouts instead\nof _includes.","description":"Nunjucks","section":"Core"},{"url":"/core/yaml/","type":"page","content":"YAML","section":"Core"},{"url":"/core/yaml/#yaml-is-format-to-save","type":"paragraph","content":"YAML is format to save serialized data.\nIt's enabled by default and is useful for pages with multiple pieces of\ntext, like landing pages, guides, directories, etc.","description":"YAML","section":"Core"},{"url":"/core/yaml/#this-format-is-useful-for","type":"paragraph","content":"This format is useful for shared data, so you can create _data.yml or\n_data/*.yml files to save common variables.","description":"YAML","section":"Core"},{"url":"/core/yaml/#creating-pages-in-yaml","type":"heading","content":"Creating pages in YAML","description":"YAML","section":"Core"},{"url":"/core/yaml/#this-format-can-be-used-also-to","type":"paragraph","content":"This format can be used also to create pages, just add a file with .yml or\n.yaml extension to your site. For example:","description":"YAML","section":"Core"},{"url":"/core/yaml/#title:-welcome-to-my","type":"code","content":"title: Welcome to my page\nlayout: layouts/main.njk\nintro: |\n  This is my first post using lume\n  I hope you like it!\n\nsections:\n  - title: Design\n    image: img/section1.jpg\n    text: I design beautiful and accesible websites\n\n  - title: Development\n    image: img/section2.jpg\n    text: And can write HTML and CSS code!\n","description":"YAML","section":"Core"},{"url":"/core/yaml/#you-will-need-a-layout-to","type":"paragraph","content":"You will need a layout to render this page and generate the HTML:","description":"YAML","section":"Core"},{"url":"/core/yaml/#lesshtmlgreater-lessheadgreater-lesstitlegreater","type":"code","content":"<html>\n  <head>\n    <title>{{ title }}</title>\n  </head>\n  <body>\n    <header>\n      <h1>{{ title }}</h1>\n      <p>{{ intro }}</p>\n    </header>\n\n    {% for section in sections %}\n    <section>\n      <h2>{{ section.title }}</h2>\n      <img src=\"{{ section.image }}\">\n      <p>{{ section.text }}</p>\n    </section>\n    {% endfor %}\n  </body>\n</html>\n","description":"YAML","section":"Core"},{"url":"/core/yaml/#in-_config.ts-the-second","type":"paragraph","content":"In _config.ts, the second argument of lume() is used to configure the\nplugins that are enabled by default (like this!). Use it to configure the YAML\nplugin.","description":"YAML","section":"Core"},{"url":"/core/yaml/#for-example-by-default-the","type":"paragraph","content":"For example, by default, the extensions .yaml and .yml are loaded. But if we\nwant to load only .yaml files:","description":"YAML","section":"Core"},{"url":"/core/yaml/#yaml-plugin","type":"code","content":"// YAML plugin configuration\nconst yaml = {\n  extensions: [\".yaml\"],\n};\n\n// Apply the plugin config\nconst site = lume({}, { yaml });\n","description":"YAML","section":"Core"},{"url":"/core/url/","type":"page","content":"URL","section":"Core"},{"url":"/core/url/#lume-provide-two-filters-to","type":"paragraph","content":"Lume provide two filters to normalize the URLs in your pages:","description":"URL","section":"Core"},{"url":"/core/url/#url","type":"heading","content":"url","description":"URL","section":"Core"},{"url":"/core/url/#the-filter-url-normalize-a","type":"paragraph","content":"The filter url normalize a single path with the location value that you have\nconfigured in _config.js. It's useful if your site is in a subdirectory or you\nwant to generate absolute URLs.","description":"URL","section":"Core"},{"url":"/core/url/#lessa-href\"-'about-us'-or-url","type":"code","content":"<a href=\"{{ '/about-us' | url }}\">\n\n<!-- Full URL -->\n<a href=\"{{ '/about-us' | url(true) }}\">\n","description":"URL","section":"Core"},{"url":"/core/url/#use-the-character-~-to-use-the","type":"paragraph","content":"Use the character ~ to use the source file name instead of the final URL. The\nplugin automatically will detect the final URL for you. This is useful for\ndynamic URLs and updating automatically all links to one page when the URL of\nthis page changes. For example:","description":"URL","section":"Core"},{"url":"/core/url/#lessa-href\"-'~about-us.md'-or","type":"code","content":"<a href=\"{{ '~/about-us.md' | url }}\">\n\n<!-- Will be converted to -->\n<a href=\"/about-us/\">\n","description":"URL","section":"Core"},{"url":"/core/url/#note:-if-you-don't-want-to-use","type":"paragraph","content":"Note: If you don't want to use this filter everywhere there is a url, you\nmay be interested in the Base path plugin","description":"URL","section":"Core"},{"url":"/core/url/#htmlurl","type":"heading","content":"htmlUrl","description":"URL","section":"Core"},{"url":"/core/url/#this-filter-is-similar-to-url","type":"paragraph","content":"This filter is similar to url but it works with HTML code: it search and\nnormalize all URLs found in href and src attributes:","description":"URL","section":"Core"},{"url":"/core/url/#-text:-'go-to-lessa","type":"code","content":"---\ntext: 'Go to <a href=\"/\">Homepage</a>'\n---\n<div>{{ text | htmlUrl | safe }}</div>\n","description":"URL","section":"Core"},{"url":"/core/components/","type":"page","content":"Components","section":"Core"},{"url":"/core/components/#components-are-template-pieces","type":"paragraph","content":"Components are template pieces that you can use in other templates. Some\ntemplate engines like Nunjucks, Pug or Liquid have ways to reuse codes (like\nincludes, macros, etc). The Lume components have the following advantages:","description":"Components","section":"Core"},{"url":"/core/components/#they-are-template-engine","type":"list","content":"They are template engine agnostic. For example, you can create your components\nin JSX or Javascript and use them in Nunjucks.","description":"Components","section":"Core"},{"url":"/core/components/#they-generate-not-only-the-html","type":"list","content":"They generate not only the HTML code but also CSS and Javascript code needed.","description":"Components","section":"Core"},{"url":"/core/components/#they-are-available-everywhere","type":"list","content":"They are available everywhere, no need to import them manually.","description":"Components","section":"Core"},{"url":"/core/components/#create-your-own-components","type":"heading","content":"Create your own components","description":"Components","section":"Core"},{"url":"/core/components/#components-are-stored-in-the","type":"paragraph","content":"Components are stored in the _components directory. You can change it in the\nconfiguration file. To create a new\ncomponent, just create a file in this directory with the name of your component\nand the extension of the template engine that you want to use. For example a\ncomponent in Nunjucks that renders a button could be stored in\n_components/button.njk:","description":"Components","section":"Core"},{"url":"/core/components/#lessbutton-class\"button\"greater-text","type":"code","content":"<button class=\"button\">{{ text }}</button>\n","description":"Components","section":"Core"},{"url":"/core/components/#this-component-is-available-in","type":"paragraph","content":"This component is available in your layouts under the comp variable (this can\nbe configured also). It's a global variable that contain all components. In our\nexample, we can render the button component with the comp.button() function:","description":"Components","section":"Core"},{"url":"/core/components/#lessh1greaterwelcome-to-my-site.lessh1greater","type":"code","content":"<h1>Welcome to my site.</h1>\n{{ comp.button({ text: \"Login\" }) | safe }}\n","description":"Components","section":"Core"},{"url":"/core/components/#note-that-the-component-accepts","type":"paragraph","content":"Note that the component accepts an object with the properties that we want to\npass to the component. This component is available in any other template engine.\nFor example Javascript:","description":"Components","section":"Core"},{"url":"/core/components/#export-default-function-(-comp","type":"code","content":"export default function ({ comp }) {\n  return `\n  <h1>Welcome to my site.</h1>\n  ${comp.button({ text: \"Login\" })}\n`;\n}\n","description":"Components","section":"Core"},{"url":"/core/components/#eta","type":"paragraph","content":"Eta templates:","description":"Components","section":"Core"},{"url":"/core/components/#lessh1greaterwelcome-to-my","type":"code","content":"<h1>Welcome to my site.</h1>\n<%= comp.button({ text: \"Login\" }) %>\n","description":"Components","section":"Core"},{"url":"/core/components/#etc.","type":"paragraph","content":"Etc.","description":"Components","section":"Core"},{"url":"/core/components/#component-assets","type":"heading","content":"Component assets","description":"Components","section":"Core"},{"url":"/core/components/#components-can-export-css-and","type":"paragraph","content":"Components can export CSS and JS code. To do that, the component need to export\ncss or js variables.","description":"Components","section":"Core"},{"url":"/core/components/#in-our-example-we-may-want-to","type":"paragraph","content":"In our example, we may want to apply some styles to the button. In a Nunjucks\ntemplate, the way to export data is using a front matter:","description":"Components","section":"Core"},{"url":"/core/components/#-css:-or-.button","type":"code","content":"---\ncss: |\n  .button {\n    background-color: blue;\n    color: white;\n  }\n---\n<button class=\"button\">{{ text }}</button>\n","description":"Components","section":"Core"},{"url":"/core/components/#this-css-code-will-be-exported","type":"paragraph","content":"This css code will be exported in your dest folder in the /components.css\nfile together with the CSS code of other used components. Note that if the\ncomponent is not used, the CSS code won't be exported. This is an interesting\nfeature that allows to have a library of many components and only export the CSS\nand JS code that you only need.","description":"Components","section":"Core"},{"url":"/core/components/#organize-your-components","type":"heading","content":"Organize your components","description":"Components","section":"Core"},{"url":"/core/components/#components-can-be-saved-in","type":"paragraph","content":"Components can be saved in subdirectories. For example, the button component\ncould be saved in the ui subdirectory (_components/ui/button.njk in your\nsrc folder). In this case, you can access to this component with\ncomp.ui.button().","description":"Components","section":"Core"},{"url":"/core/components/#components-inside-components","type":"heading","content":"Components inside components","description":"Components","section":"Core"},{"url":"/core/components/#components-can-use-other","type":"paragraph","content":"Components can use other components internally. Let's say we want to create the\nsearch component that use button internally. Let's see an example using a JS\ntemplate:","description":"Components","section":"Core"},{"url":"/core/components/#","type":"code","content":"// _components/search.js\n\nexport const css = `\n.search {\n  background: gray;\n  padding: 20px;\n}\n`;\n\nexport const js = `\nimport from \"js/search.js\"\n`;\n\nexport default function ({ comp }) {\n  return `\n<form class=\"search\">\n  <label>\n    Search:\n    <input type=\"search\" name=\"q\">\n  </label>\n  ${comp.button({ text: \"Submit\" })}\n</form>\n`;\n}\n","description":"Components","section":"Core"},{"url":"/core/components/#in-this-example-the-component","type":"paragraph","content":"In this example, the component exports CSS and JS code, in addition to the HTML\ncode.","description":"Components","section":"Core"},{"url":"/core/components/#jsx-and-tsx-components","type":"heading","content":"JSX and TSX components","description":"Components","section":"Core"},{"url":"/core/components/#if-the-jsx-plugin-is-enabled","type":"paragraph","content":"If the JSX plugin is enabled, you can use it to generate\ncomponents:","description":"Components","section":"Core"},{"url":"/core/components/#export-const-css-.button","type":"code","content":"export const css = `\n.button {\n  background-color: blue;\n  color: white;\n}\n`;\n\nexport default function ({ text }) {\n  return <button>{text}</button>;\n}\n","description":"Components","section":"Core"},{"url":"/core/components/#jsx-components-can-be-used-in","type":"paragraph","content":"JSX components can be used in any template engine.","description":"Components","section":"Core"},{"url":"/core/searching/","type":"page","content":"Search and collecting","section":"Core"},{"url":"/core/searching/#in-the-layouts-you-have-the","type":"paragraph","content":"In the layouts, you have the search helper that allows to search other pages.\nIt's useful to build menus or other navigation stuff.","description":"Search and collecting","section":"Core"},{"url":"/core/searching/#searching-pages","type":"heading","content":"Searching pages","description":"Search and collecting","section":"Core"},{"url":"/core/searching/#the-function-search.pages()","type":"paragraph","content":"The function search.pages() returns an array of pages that you can filter and\nsort.","description":"Search and collecting","section":"Core"},{"url":"/core/searching/#to-search-by-tags-just-include","type":"paragraph","content":"To search by tags, just include the tag names as first argument, separated by\nspace. For example, to search all pages containing the tags post and html,\nyou have to execute search.pages(\"post html\"):","description":"Search and collecting","section":"Core"},{"url":"/core/searching/#lessulgreater-percent-for-post-in","type":"code","content":"<ul>\n  {% for post in search.pages(\"post html\") %}\n  <li>{{ post.data.title }}</li>\n  {% endfor %}\n</ul>\n","description":"Search and collecting","section":"Core"},{"url":"/core/searching/#you-can-use-quotes-to-search","type":"paragraph","content":"You can use quotes to search tags containing spaces. For example to search by\nthe tags post and static site generator:","description":"Search and collecting","section":"Core"},{"url":"/core/searching/#lessulgreater-percent-for-post-in-1","type":"code","content":"<ul>\n  {% for post in search.pages(\"post 'static site generator'\") %}\n  <li>{{ post.data.title }}</li>\n  {% endfor %}\n</ul>\n","description":"Search and collecting","section":"Core"},{"url":"/core/searching/#sort-pages","type":"heading","content":"Sort pages","description":"Search and collecting","section":"Core"},{"url":"/core/searching/#the-second-argument-is-the","type":"paragraph","content":"The second argument is the value used to sort. By default the pages are sorted\nby date, but you can use any field. For example, if you want sort by title:","description":"Search and collecting","section":"Core"},{"url":"/core/searching/#lessulgreater-percent-for-post-in-2","type":"code","content":"<ul>\n  {% for post in search.pages(\"post html\", \"title\") %}\n  <li>{{ post.data.title }}</li>\n  {% endfor %}\n</ul>\n","description":"Search and collecting","section":"Core"},{"url":"/core/searching/#note:-you-can-use-dot-notation","type":"paragraph","content":"Note: You can use dot notation to sort by any subfield. For example:\nheader.title.","description":"Search and collecting","section":"Core"},{"url":"/core/searching/#sorting-allows-to-specify","type":"paragraph","content":"Sorting allows to specify multiple fields. For example let's sort by \"order\" and\n\"title\" fields:","description":"Search and collecting","section":"Core"},{"url":"/core/searching/#percent-for-post-in","type":"code","content":"{% for post in search.pages(\"post html\", \"order title\") %}\n  ...\n{% endfor %}\n","description":"Search and collecting","section":"Core"},{"url":"/core/searching/#by-default-sort-is-ascendent","type":"paragraph","content":"By default, sort is ascendent, but this can be changed appending =desc to the\nfield name:","description":"Search and collecting","section":"Core"},{"url":"/core/searching/#percent-for-post-in-1","type":"code","content":"{% for post in search.pages(\"post html\", \"order=asc title=desc\") %}\n  ...\n{% endfor %}\n","description":"Search and collecting","section":"Core"},{"url":"/core/searching/#limit-the-results","type":"heading","content":"Limit the results","description":"Search and collecting","section":"Core"},{"url":"/core/searching/#the-third-argument-of","type":"paragraph","content":"The third argument of search.pages() allow to limit the number of results. You\ncan use a positive number to return the first n results or a negative number\nto return the latests n results:","description":"Search and collecting","section":"Core"},{"url":"/core/searching/#less!-get-the-3-first-values","type":"code","content":"<!-- Get the 3 first values -->\n{% for post in search.pages(\"post html\", \"order title\", 3) %}\n  ...\n{% endfor %}\n\n<!-- Get the 3 latest values -->\n{% for post in search.pages(\"post html\", \"order title\", -3) %}\n  ...\n{% endfor %}\n","description":"Search and collecting","section":"Core"},{"url":"/core/searching/#filtering-by-a-field","type":"heading","content":"Filtering by a field","description":"Search and collecting","section":"Core"},{"url":"/core/searching/#you-can-filter-pages-not-only","type":"paragraph","content":"You can filter pages not only by tags but also any other field that you want.\nFor example, to search all pages with the value menu as true, simply include\nthe query menu=true:","description":"Search and collecting","section":"Core"},{"url":"/core/searching/#percent-for-option-in","type":"code","content":"{% for option in search.pages(\"menu=true\") %}\n<a href=\"{{ option.data.url }}\">\n  {{ option.data.title }}\n</a>\n{% endfor %}\n","description":"Search and collecting","section":"Core"},{"url":"/core/searching/#the-available-operators-for-the","type":"paragraph","content":"The available operators for the conditions are:","description":"Search and collecting","section":"Core"},{"url":"/core/searching/#to-search-coincidences-for","type":"list","content":"= to search coincidences, for example menu=true. The strings true and\nfalse are converted to booleans automatically. undefined and null are also converted so you can filter pages without a value with keyname=undefined.","description":"Search and collecting","section":"Core"},{"url":"/core/searching/#!-to-search-non-coincidences","type":"list","content":"!= to search non-coincidences, for example menu!=true. The strings true\nand false are converted to booleans automatically. undefined and null are also converted so you can filter pages containing a value with keyname!=undefined.","description":"Search and collecting","section":"Core"},{"url":"/core/searching/#to-search-values-starting","type":"list","content":"^= to search values starting with another value. For example all categories\nstarting with the letter A: category^=A.","description":"Search and collecting","section":"Core"},{"url":"/core/searching/#dollar-to-search-values-ending-with","type":"list","content":"$= to search values ending with another value. For example all categories\nending with the letter b: category$=b.","description":"Search and collecting","section":"Core"},{"url":"/core/searching/#*-to-search-values-containing","type":"list","content":"*= to search values containing another value. For example all titles\ncontaining the string security: title*=security.","description":"Search and collecting","section":"Core"},{"url":"/core/searching/#less-greater-less-greater-to-search-values","type":"list","content":"<, >, <=, >= to search values lower or greater than other value. For\nexample, all pages with level greater than 2: level>2.","description":"Search and collecting","section":"Core"},{"url":"/core/searching/#you-can-use-the-dot-notation","type":"paragraph","content":"You can use the dot notation and even combine queries with tags. For example,\nlet's say you want to select all pages with the value taxonomy.category=sport\nand with the tag football:","description":"Search and collecting","section":"Core"},{"url":"/core/searching/#percent-for-post-in-2","type":"code","content":"{% for post in search.pages(\"taxonomy.category=sport football\") %}\n<a href=\"{{ post.data.url }}\">\n  {{ post.data.title }}\n</a>\n{% endfor %}\n","description":"Search and collecting","section":"Core"},{"url":"/core/searching/#using-%7C-for-or-conditions","type":"heading","content":"Using | for OR conditions","description":"Search and collecting","section":"Core"},{"url":"/core/searching/#you-can-assign-several-values","type":"paragraph","content":"You can assign several values for any condition using the pipe character |.\nFor example, if you want to search pages having the tag html OR css, you can\ndo it with search.pages(\"html|css\"). You can combine AND and OR using spaces\nand pipes. For example, to search all pages with the tag post and also one of\nthe tags html or css: search.pages(\"post html|css\").","description":"Search and collecting","section":"Core"},{"url":"/core/searching/#or-conditions-can-be-used-with","type":"paragraph","content":"OR conditions can be used with other fields. Example, to search pages with\ntitles containing the words \"html\", \"css\" or \"javascript\":\nsearch.pages(\"title*=html|css|javascript\").","description":"Search and collecting","section":"Core"},{"url":"/core/searching/#in-addition-to-space-separated","type":"paragraph","content":"In addition to space separated values, you can use an array of values, that\nsometimes is more practical.","description":"Search and collecting","section":"Core"},{"url":"/core/searching/#percent-for-post-in-3","type":"code","content":"{% for post in search.pages([\"taxonomy.category=sport\", \"football\"]) %}\n<a href=\"{{ post.data.url }}\">\n  {{ post.data.title }}\n</a>\n{% endfor %}\n","description":"Search and collecting","section":"Core"},{"url":"/core/searching/#search-one-page","type":"heading","content":"Search one page","description":"Search and collecting","section":"Core"},{"url":"/core/searching/#the-function-search.page()-is","type":"paragraph","content":"The function search.page() is very similar to search.pages() but only\nreturns the first page found. Note the limit argument is not available.","description":"Search and collecting","section":"Core"},{"url":"/core/searching/#searching-next-and-previous-page","type":"heading","content":"Searching next and previous page","description":"Search and collecting","section":"Core"},{"url":"/core/searching/#if-the-current-page-belongs-to","type":"paragraph","content":"If the current page belongs to a list of pages (for example, a list of pages\nunder the same tag), you can get the previous and next page in this list. To do\nthat we have the functions search.previousPage() and search.nextPage(). The\nsyntax is the same as search.pages() but the first argument is the url of the\ncurrent page. Let's see an example:","description":"Search and collecting","section":"Core"},{"url":"/core/searching/#lessh2greatermore-articles-tagged-as","type":"code","content":"<h2>More articles tagged as \"html\"</h2>\n\n{% set post = search.previousPage(url, \"html\") %}\n\n{% if post %}\n  <a href=\"{{ post.data.url }}\" rel=\"prev\">← {{ post.data.title }}</a>\n{% else %}\n\n{% set post = search.nextPage(url, \"html\") %}\n\n{% if post %}\n  <a href=\"{{ post.data.url }}\" rel=\"next\">{{ post.data.title }} →</a>\n{% endif %}\n","description":"Search and collecting","section":"Core"},{"url":"/core/searching/#searching-tags","type":"heading","content":"Searching tags","description":"Search and collecting","section":"Core"},{"url":"/core/searching/#the-function-tags-returns-the","type":"paragraph","content":"The function tags returns the list of all available tags. You can use the\nfirst argument to filter the pages of which you want to get the tags. For\nexample, to list all tags used by pages with the category sport:","description":"Search and collecting","section":"Core"},{"url":"/core/searching/#lessstronggreaterlist-of-tags-in","type":"code","content":"<strong>List of tags in sport:</strong>\n\n<ul>\n  {% for tag in search.tags(\"category=sport\") %}\n  <li>\n    <a href=\"/tags/{{ tag }}\">\n      {{ tag }}\n    </a>\n  </li>\n  {% endfor %}\n</ul>\n","description":"Search and collecting","section":"Core"},{"url":"/core/searching/#searching-data","type":"heading","content":"Searching data","description":"Search and collecting","section":"Core"},{"url":"/core/searching/#the-function-data-returns-the","type":"paragraph","content":"The function data returns the data associated to any file or directory in the\nsource directory. This is useful to get the data stored in any _data of any\ndirectory. For example:","description":"Search and collecting","section":"Core"},{"url":"/core/searching/#set-companydata","type":"code","content":"{{ set companyData = search.data(\"about/the-company\") }}\n","description":"Search and collecting","section":"Core"},{"url":"/core/pagination/","type":"page","content":"Pagination","section":"Core"},{"url":"/core/pagination/#the-same-source-file-can","type":"paragraph","content":"The same source file can generate many output pages. This is useful to paginate\nelements, for example. To do that, create a JavaScript page exporting a\ngenerator\nas default.","description":"Pagination","section":"Core"},{"url":"/core/pagination/#posts.tmpl.js-export-const","type":"code","content":"// posts.tmpl.js\n\nexport const layout = \"layouts/page-list.njk\";\n\nexport default function* (data, filters) {\n  const pages = [1, 2, 3];\n\n  for (const page of pages) {\n    yield {\n      url: `page-${page}`,\n      content: `This is the page ${page}`,\n    };\n  }\n}\n","description":"Pagination","section":"Core"},{"url":"/core/pagination/#in-this-example-the-page","type":"paragraph","content":"In this example, the page returns a generator that create three pages. Every\nyield must return an unique url (to generate different pages without\noverride each other), and can include other data needed to render the final\nHTML. Note also that you can use named exports for those variables that are\ncommon to all pages, like the layout.","description":"Pagination","section":"Core"},{"url":"/core/pagination/#paginate-helper","type":"heading","content":"paginate helper","description":"Pagination","section":"Core"},{"url":"/core/pagination/#the-paginate-helper-allows-to","type":"paragraph","content":"The paginate helper allows to create pages using an array of results. This is\nuseful combined with the search helper to create paginated results. For\nexample:","description":"Pagination","section":"Core"},{"url":"/core/pagination/#export-const-layout","type":"code","content":"export const layout = \"layouts/post-list.njk\";\n\nexport default function* ({ search, paginate }) {\n  const posts = search.pages(\"posts\");\n\n  for (\n    const page of paginate(posts, { url: (n) => `posts/page/${n}/`, size: 10 })\n  ) {\n    yield page;\n  }\n}\n","description":"Pagination","section":"Core"},{"url":"/core/pagination/#this-code-use-the-helpers","type":"paragraph","content":"This code use the helpers search and paginate to create as many pages as\nneeded. First it search all pages tagged as \"posts\" and then paginate the result\ncreating one page for every 10 posts. As you can see, the paginate helper\naccepts two arguments: an iterable and an object with the options. The available\noptions are:","description":"Pagination","section":"Core"},{"url":"/core/pagination/#default","type":"paragraph","content":"Default","description":"Pagination","section":"Core"},{"url":"/core/pagination/#size","type":"paragraph","content":"size","description":"Pagination","section":"Core"},{"url":"/core/pagination/#10","type":"paragraph","content":"10","description":"Pagination","section":"Core"},{"url":"/core/pagination/#number-of-elements-per","type":"paragraph","content":"Number of elements per page","description":"Pagination","section":"Core"},{"url":"/core/pagination/#url","type":"paragraph","content":"url","description":"Pagination","section":"Core"},{"url":"/core/pagination/#(n)-greater","type":"paragraph","content":"(n) => page-${n}","description":"Pagination","section":"Core"},{"url":"/core/pagination/#the-function-to-generate-the","type":"paragraph","content":"The function to generate the URL of each page. It receives the page number as argument.","description":"Pagination","section":"Core"},{"url":"/core/pagination/#this-helper-returns-a-generator","type":"paragraph","content":"This helper returns a generator with which that you can iterate. Each item has\nthe following values:","description":"Pagination","section":"Core"},{"url":"/core/pagination/#for-(const-page-of","type":"code","content":"for (const page of paginate(posts, { url: (n) => `posts/page/${n}/`, size: 10 })) {\n  page.url;        // URL of the page, for example \"post/page/1\"\n  page.results;    // Array with the results of this page\n\n  // Pagination info:\n  page.pagination.page;         // The current page\n  page.pagination.totalPages;   // Total pages\n  page.pagination.totalResults; // Total results\n  page.pagination.previous;     // The URL of the previous page\n  page.pagination.next;         // The URL of the next page\n\n  yield page;\n}\n","description":"Pagination","section":"Core"},{"url":"/core/events/","type":"page","content":"Events","section":"Core"},{"url":"/core/events/#lume-has-events-that-you-can","type":"paragraph","content":"Lume has events that you can use to run some code at certain times during the\ncompiling process. You can configure those events in the _config.js file with\nthe function addEventListener.","description":"Events","section":"Core"},{"url":"/core/events/#beforebuild","type":"heading","content":"beforeBuild","description":"Events","section":"Core"},{"url":"/core/events/#this-event-is-triggered-just","type":"paragraph","content":"This event is triggered just before the site build starts. Note that if you are\nwatching the files with lume --serve, this is only executed once before\nthe initial build. Use beforeUpdate for subsequent changes.","description":"Events","section":"Core"},{"url":"/core/events/#site.addeventlistener(\"beforebui","type":"code","content":"site.addEventListener(\"beforeBuild\", () => {\n  console.log(\"The build is about to start\");\n});\n","description":"Events","section":"Core"},{"url":"/core/events/#note:-if-the-event-listener","type":"paragraph","content":"Note: if the event listener returns false, the build process is stopped:","description":"Events","section":"Core"},{"url":"/core/events/#site.addeventlistener(\"beforebui-1","type":"code","content":"site.addEventListener(\"beforeBuild\", () => {\n  return false; // Stop the build\n});\n","description":"Events","section":"Core"},{"url":"/core/events/#afterbuild","type":"heading","content":"afterBuild","description":"Events","section":"Core"},{"url":"/core/events/#this-event-is-triggered-after","type":"paragraph","content":"This event is triggered after build the site. Note that if you are watching the\nfiles with lume --serve, this is only executed once after the initial\nbuild. Use afterUpdate for subsequent changes.","description":"Events","section":"Core"},{"url":"/core/events/#site.addeventlistener(\"afterbuil","type":"code","content":"site.addEventListener(\"afterBuild\", () => {\n  console.log(\"The build is finished\");\n});\n","description":"Events","section":"Core"},{"url":"/core/events/#beforeupdate","type":"heading","content":"beforeUpdate","description":"Events","section":"Core"},{"url":"/core/events/#this-event-is-triggered-every","type":"paragraph","content":"This event is triggered every time a change is detected on build the site with\nlume --serve.","description":"Events","section":"Core"},{"url":"/core/events/#site.addeventlistener(\"beforeupd","type":"code","content":"site.addEventListener(\"beforeUpdate\", (event) => {\n  console.log(\"New changes detected\");\n  console.log(event.files); // The files that have changed\n});\n","description":"Events","section":"Core"},{"url":"/core/events/#note:-if-the-event-listener-1","type":"paragraph","content":"Note: if the event listener returns false, the update process is stopped:","description":"Events","section":"Core"},{"url":"/core/events/#site.addeventlistener(\"beforeupd-1","type":"code","content":"site.addEventListener(\"beforeUpdate\", () => {\n  return false; // Stop the update\n});\n","description":"Events","section":"Core"},{"url":"/core/events/#afterupdate","type":"heading","content":"afterUpdate","description":"Events","section":"Core"},{"url":"/core/events/#this-event-is-triggered-after-1","type":"paragraph","content":"This event is triggered after re-build the site after detecting changes with\nlume --serve.","description":"Events","section":"Core"},{"url":"/core/events/#site.addeventlistener(\"afterupda","type":"code","content":"site.addEventListener(\"afterUpdate\", (event) => {\n  console.log(\"Site updated\");\n  console.log(event.files); // The files that have changed\n});\n","description":"Events","section":"Core"},{"url":"/core/events/#afterrender","type":"heading","content":"afterRender","description":"Events","section":"Core"},{"url":"/core/events/#this-event-is-triggered-just-1","type":"paragraph","content":"This event is triggered just after all pages are rendered but before process.","description":"Events","section":"Core"},{"url":"/core/events/#site.addeventlistener(\"afterrend","type":"code","content":"site.addEventListener(\"afterRender\", (event) => {\n  console.log(\"All pages rendered\");\n});\n","description":"Events","section":"Core"},{"url":"/core/events/#beforesave","type":"heading","content":"beforeSave","description":"Events","section":"Core"},{"url":"/core/events/#this-event-is-triggered-just-2","type":"paragraph","content":"This event is triggered just before saving the generated pages.","description":"Events","section":"Core"},{"url":"/core/events/#site.addeventlistener(\"beforesav","type":"code","content":"site.addEventListener(\"beforeSave\", (event) => {\n  console.log(\"All pages are about to be saved\");\n});\n","description":"Events","section":"Core"},{"url":"/core/events/#note:-if-the-event-listener-2","type":"paragraph","content":"Note: if the event listener returns false, the save process is stopped:","description":"Events","section":"Core"},{"url":"/core/events/#site.addeventlistener(\"beforesav-1","type":"code","content":"site.addEventListener(\"beforeSave\", () => {\n  return false; // Don't save the files\n});\n","description":"Events","section":"Core"},{"url":"/core/events/#execute-scripts-with-events","type":"heading","content":"Execute scripts with events","description":"Events","section":"Core"},{"url":"/core/events/#in-addition-to-functions-you","type":"paragraph","content":"In addition to functions, you can also execute scripts in events\nby passing a string with the script name.","description":"Events","section":"Core"},{"url":"/core/events/#create-the","type":"code","content":"// Create the script\nsite.script(\"compress\", \"gzip -r _site site.gz\");\n\n// Execute it after build the site\nsite.addEventListener(\"afterBuild\", \"compress\").\n\n// Or you can run any script directly\nsite.addEventListener(\"afterBuild\", \"gzip -r _site site.gz\").\n","description":"Events","section":"Core"},{"url":"/core/events/#events-options","type":"heading","content":"Events options","description":"Events","section":"Core"},{"url":"/core/events/#similar-to-web-apis-the-third","type":"paragraph","content":"Similar to\nweb APIs\nthe third argument of addEventListener allows to customize the event listener.\nThe available options are:","description":"Events","section":"Core"},{"url":"/core/events/#once:-to-run-the-listener-only","type":"list","content":"once: To run the listener only once and then remove it.","description":"Events","section":"Core"},{"url":"/core/events/#signal:-to-provide-an","type":"list","content":"signal: To provide an AbortSignal to remove the listener at any time.","description":"Events","section":"Core"},{"url":"/core/events/#example-of-a-listener-executed","type":"paragraph","content":"Example of a listener executed only once:","description":"Events","section":"Core"},{"url":"/core/events/#site.addeventlistener(\"afterupda-1","type":"code","content":"site.addEventListener(\"afterUpdate\", () => {\n  console.log(\"This is the first update\");\n}, {\n  once: true,\n});\n","description":"Events","section":"Core"},{"url":"/core/events/#example-of-signal","type":"paragraph","content":"Example of signal usage:","description":"Events","section":"Core"},{"url":"/core/events/#const-controller-new","type":"code","content":"const controller = new AbortController();\nlet times = 0;\n\nsite.addEventListener(\"afterUpdate\", () => {\n  times++;\n\n  // Remove the listener after 5 times\n  if (times === 5) {\n    controller.abort();\n  }\n\n  console.log(`This is the update ${times}`);\n}, {\n  signal: controller.signal,\n});\n","description":"Events","section":"Core"},{"url":"/core/scripts/","type":"page","content":"Scripts","section":"Core"},{"url":"/core/scripts/#lume-includes-a-simple-script","type":"paragraph","content":"Lume includes a simple script runner that you can use to execute commands or\ncustom functions. To create a new script, use the function script() in your\n_config.js file:","description":"Scripts","section":"Core"},{"url":"/core/scripts/#site.script(\"deploy\"-\"rsync-r","type":"code","content":"site.script(\"deploy\", \"rsync -r _site/** user@server.com:/var/www/\");\n","description":"Scripts","section":"Core"},{"url":"/core/scripts/#now-you-can-run-this-script","type":"paragraph","content":"Now, you can run this script from the CLI with lume run deploy.","description":"Scripts","section":"Core"},{"url":"/core/scripts/#running-multiple-commands","type":"heading","content":"Running multiple commands","description":"Scripts","section":"Core"},{"url":"/core/scripts/#you-can-create-a-script-to","type":"paragraph","content":"You can create a script to execute multiple commands, one after other. There\nare two ways to do that: by adding more arguments or joining the different\ncommands with &&. For example:","description":"Scripts","section":"Core"},{"url":"/core/scripts/#site.script(-\"save-site\"","type":"code","content":"site.script(\n  \"save-site\",\n  \"gzip -r _site site.gz\",\n  \"scp site.gz user@host.com:/home/user/archive\",\n);\n\n// Alternative way using \"&&\"\nsite.script(\n  \"save-site\",\n  \"gzip -r _site site.gz && scp site.gz user@host.com:/home/user/archive\",\n);\n","description":"Scripts","section":"Core"},{"url":"/core/scripts/#now-by-running-lume-run","type":"paragraph","content":"Now, by running lume run save-site, these two commands will be executed.","description":"Scripts","section":"Core"},{"url":"/core/scripts/#if-you-don't-need-to-execute","type":"paragraph","content":"If you don't need to execute the commands in serie but in parallel, use an\narray of commands or the character &:","description":"Scripts","section":"Core"},{"url":"/core/scripts/#site.script(","type":"code","content":"site.script(\n  \"compress-assets\",\n  [\n    \"gzip -r _site/images images.gz\",\n    \"gzip -r _site/videos videos.gz\",\n  ],\n);\n\n// Alternative way using the character \"&\"\nsite.script(\n  \"compress-assets\",\n  \"gzip -r _site/images images.gz & gzip -r _site/videos videos.gz\",\n);\n","description":"Scripts","section":"Core"},{"url":"/core/scripts/#compose-scripts","type":"heading","content":"Compose scripts","description":"Scripts","section":"Core"},{"url":"/core/scripts/#scripts-can-execute-other","type":"paragraph","content":"Scripts can execute other scripts, just use the name of a registered script as a\ncommand in another script. For example:","description":"Scripts","section":"Core"},{"url":"/core/scripts/#create-two","type":"code","content":"// Create two scripts\nsite.script(\"compress\", \"gzip -r _site site.gz\");\nsite.script(\"upload\", \"scp site.gz user@host.com:/home/user/archive\");\n\n// Create a third scripts that runs the two previous scripts\nsite.script(\"compress-and-upload\", \"compress\", \"upload\");\n","description":"Scripts","section":"Core"},{"url":"/core/scripts/#custom-functions","type":"heading","content":"Custom functions","description":"Scripts","section":"Core"},{"url":"/core/scripts/#scripts-not-only-can-execute","type":"paragraph","content":"Scripts not only can execute CLI commands but also JavaScript functions. For\nexample:","description":"Scripts","section":"Core"},{"url":"/core/scripts/#site.script(\"add-date-published\"","type":"code","content":"site.script(\"add-date-published\", () => {\n  Deno.writeTextFileSync(\n    site.dest(\"published.txt\"),\n    `Site published at: ${Date.now()}`,\n  );\n});\n","description":"Scripts","section":"Core"},{"url":"/core/scripts/#running-scripts-from-javascript","type":"heading","content":"Running scripts from JavaScript","description":"Scripts","section":"Core"},{"url":"/core/scripts/#to-run-a-script-from-javascript","type":"paragraph","content":"To run a script from JavaScript instead of the CLI, use the site.run()\nfunction:","description":"Scripts","section":"Core"},{"url":"/core/scripts/#create-the","type":"code","content":"// Create the script\nsite.script(\"compress\", \"gzip -r _site site.gz\");\n\n// Run it\nsite.run(\"compress\");\n","description":"Scripts","section":"Core"},{"url":"/core/render-order/","type":"page","content":"Render order","section":"Core"},{"url":"/core/render-order/#in-lume-all-pages-are-rendered","type":"paragraph","content":"In lume all pages are rendered at the same time. This works well in most cases,\nbut sometimes you want to make sure a page is rendered after or before others.\nThe most typical example is with auto-generated pages. Let's say you have a page\nthat generate multiple pages dynammically using data from an external API:","description":"Render order","section":"Core"},{"url":"/core/render-order/#export-const-layout","type":"code","content":"export const layout = \"layouts/api.njk\";\n\nconst response = await fetch(\"https://my-api.com/data.json\");\nconst data = await response.json();\n\nexport default function* () {\n  for (const item of data.items) {\n    yield {\n      url: `item-${item.id}`,\n      title: item.title,\n      tags: [\"api-item\"],\n      content: item.text,\n    };\n  }\n}\n","description":"Render order","section":"Core"},{"url":"/core/render-order/#this-script-will-generate-one","type":"paragraph","content":"This script will generate one page for every item returned by the api. To list\nand paginate all these auto-generated pages, you may want to create an\nadditional page like this:","description":"Render order","section":"Core"},{"url":"/core/render-order/#export-const-layout-1","type":"code","content":"export const layout = \"layouts/api-pagination.njk\";\n\nexport default function* ({ search, paginate }) {\n  const items = search.pages(\"api-item\");\n\n  for (const page of paginate(items, { url: (n) => `/page/${n}/`, size: 10 })) {\n    yield page;\n  }\n}\n","description":"Render order","section":"Core"},{"url":"/core/render-order/#in-this-script-we-are-using","type":"paragraph","content":"In this script, we are using the search helper to search all\npages tagged as api-item (we have added this tag to the previous pages\ngenerated automatically) and paginate them with the paginate\nhelper. But we have a problem: due all pages are executed at the same time, it's\npossible that the api-item pages didn't exist before paginate them, so the\npagination won't work. What we really need is create all dynamic pages\nbefore paginate them.","description":"Render order","section":"Core"},{"url":"/core/render-order/#to-control-this-lume-has-the","type":"paragraph","content":"To control this, lume has the renderOrder variable, to configure the order in\nwhich every page will be rendered. By default this value is 0, so if you\nchange it to a negative value (like -1, -2 etc) the page will be rendered\nbefore the others, and changing to a positive value (1, 2, etc) the page\nwill be rendered after. So, to fix our example, the solution could be to\nchange the renderOrder of the pagination script to a value greater than 0, for\nexample, 1:","description":"Render order","section":"Core"},{"url":"/core/render-order/#export-const-layout-2","type":"code","content":"export const layout = \"layouts/api-pagination.njk\";\n\n// Changed this to render this page after the others\nexport const renderOrder = 1;\n\nexport default function* ({ search, paginate }) {\n  const items = search.pages(\"api-item\");\n\n  for (const page of paginate(items, { url: (n) => `/page/${n}/`, size: 10 })) {\n    yield page;\n  }\n}\n","description":"Render order","section":"Core"},{"url":"/core/render-order/#this-ensures-that-this-script","type":"paragraph","content":"This ensures that this script will be runned after all other pages are\ncreated. An alternative solution is change the renderOrder of the API script\nto a negative value, like -1.","description":"Render order","section":"Core"},{"url":"/core/multiple-template-engines/","type":"page","content":"Multiple template engines","section":"Core"},{"url":"/core/multiple-template-engines/#by-default-the-template-engine","type":"paragraph","content":"By default, the template engine used to render a file is decided according to\nthe file extension. For example, a .md file uses Markdown, .njk file uses\nNunjucks and so on.","description":"Multiple template engines","section":"Core"},{"url":"/core/multiple-template-engines/#you-can-override-this-default","type":"paragraph","content":"You can override this default behaviour with the templateEngine option. Any\npage having this variable will use it to decide the template engine, instead of\nthe extension.","description":"Multiple template engines","section":"Core"},{"url":"/core/multiple-template-engines/#the-following-example-is-a-.md","type":"paragraph","content":"The following example is a .md file but is configured to use Nunjucks to\nrender (instead of Markdown).","description":"Multiple template engines","section":"Core"},{"url":"/core/multiple-template-engines/#-title:-my","type":"code","content":"---\ntitle: My post\ntemplateEngine: njk\n---\n\n# Hello world\n","description":"Multiple template engines","section":"Core"},{"url":"/core/multiple-template-engines/#a-typical-example-is-a-file","type":"paragraph","content":"A typical example is a file using Markdown to render HTML but Nunjucks to insert\nvariables or includes. To do that, you can use commas to add several engines:","description":"Multiple template engines","section":"Core"},{"url":"/core/multiple-template-engines/#-title:-my-1","type":"code","content":"---\ntitle: My post\ntemplateEngine: njk,md\n---\n\n# Hello, this is the post title {{ title }}\n","description":"Multiple template engines","section":"Core"},{"url":"/core/multiple-template-engines/#in-the-example-above-the-page","type":"paragraph","content":"In the example above the page will be rendered using Nunjucks first and then\nMarkdown.","description":"Multiple template engines","section":"Core"},{"url":"/core/loaders/","type":"page","content":"Loaders and engines","section":"Core"},{"url":"/core/loaders/#loaders-are-functions-that-read","type":"paragraph","content":"Loaders are functions that read and return the content of files. There are\ndifferent loaders for different formats, like json, yaml, JavaScript modules\nor plain text. Creating a custom loader is really easy, you only have to create\na function that reads the content of a file and return an object with that\ncontent.","description":"Loaders and engines","section":"Core"},{"url":"/core/loaders/#let's-say-you-want-to-add","type":"paragraph","content":"Let's say you want to add support for toml format, using the\nencoding/toml Deno std module:","description":"Loaders and engines","section":"Core"},{"url":"/core/loaders/#import-parse-from","type":"code","content":"import { parse } from \"https://deno.land/std/encoding/toml.ts\";\n\nasync function tomlLoader(path) {\n  const content = await Deno.readTextFile(path);\n  return parse(content);\n}\n","description":"Loaders and engines","section":"Core"},{"url":"/core/loaders/#if-you-want-to-use-this-loader","type":"paragraph","content":"If you want to use this loader to build your site, just register it in the\n_config.js file, specifying the file extensions to apply:","description":"Loaders and engines","section":"Core"},{"url":"/core/loaders/#site.loaddata(\".toml\"","type":"code","content":"site.loadData([\".toml\"], tomlLoader);\n","description":"Loaders and engines","section":"Core"},{"url":"/core/loaders/#now-you-can-use-the-toml-format","type":"paragraph","content":"Now you can use the TOML format to save data files (_data.toml or\n_data/*.toml).","description":"Loaders and engines","section":"Core"},{"url":"/core/loaders/#to-use-this-format-to-generate","type":"paragraph","content":"To use this format to generate pages, use the loadPages function:","description":"Loaders and engines","section":"Core"},{"url":"/core/loaders/#site.loadpages(\".toml\"","type":"code","content":"site.loadPages([\".toml\"], tomlLoader);\n","description":"Loaders and engines","section":"Core"},{"url":"/core/loaders/#now-any-*.toml-file-in-your","type":"paragraph","content":"Now, any *.toml file in your site will be loaded and used to render a page.\nFor example, the file /about-us.toml will be loaded and saved as\n/about-us/index.html (unless you configure a different name using the url\nvalue.","description":"Loaders and engines","section":"Core"},{"url":"/core/loaders/#instead-of-html-pages-you-may","type":"paragraph","content":"Instead of HTML pages, you may want to use this loader to load TOML files,\nprocess them and save with the same extension (like filename.toml instead of\nfilename/index.html). To do that, you must register it with loadAssets:","description":"Loaders and engines","section":"Core"},{"url":"/core/loaders/#site.loadassets(\".toml\"","type":"code","content":"site.loadAssets([\".toml\"], tomlLoader);\n","description":"Loaders and engines","section":"Core"},{"url":"/core/loaders/#now-the-*.toml-files-are","type":"paragraph","content":"Now, the *.toml files are loaded and saved as toml. The function\nloadAssets is useful to load assets files, like css, js, svg, that you\nwant to transform (bundle, minify...) and save them keeping the same extension,\ninstead of renaming to html.","description":"Loaders and engines","section":"Core"},{"url":"/core/loaders/#note:-you-can't-use-the-same","type":"paragraph","content":"Note: you can't use the same extension to generate pages and assets, so a\nway to have support for both is adding a subextension (like tmpl) for pages.\nExample:","description":"Loaders and engines","section":"Core"},{"url":"/core/loaders/#use-*.html.toml-extension","type":"code","content":"// Use *.html.toml extension for pages\nsite.loadPages([\".html.toml\"], tomlLoader);\n\n// And any other *.toml files for assets\nsite.loadAssets([\".toml\"], tomlLoader);\n","description":"Loaders and engines","section":"Core"},{"url":"/core/loaders/#this-is-the-same-strategy-used","type":"paragraph","content":"This is the same strategy used for JavaScript/TypeScript modules (*.tmpl.js\nfor pages and *.js for JavaScript assets).","description":"Loaders and engines","section":"Core"},{"url":"/core/loaders/#loading-plain-text","type":"heading","content":"Loading plain text","description":"Loaders and engines","section":"Core"},{"url":"/core/loaders/#to-load-text-files-but-without","type":"paragraph","content":"To load text files but without parsing the content, you don't need to pass any\nloader because the text loader is used by default:","description":"Loaders and engines","section":"Core"},{"url":"/core/loaders/#load-html","type":"code","content":"// Load html pages\nsite.loadPages([\".html\"]);\n\n// Load js and css files\nsite.loadAssets([\".css\", \".js\"]);\n","description":"Loaders and engines","section":"Core"},{"url":"/core/loaders/#template-engines","type":"heading","content":"Template engines","description":"Loaders and engines","section":"Core"},{"url":"/core/loaders/#lume-supports-several-template","type":"paragraph","content":"Lume supports several template engines to render your pages, like Nunjucks, Pug\nor Eta. It's easy to extend this support for more template engines: you only\nneed to create a class extending the\nEngine interface.\nLet's see an example using\nhandlebars:","description":"Loaders and engines","section":"Core"},{"url":"/core/loaders/#import-handlebarsjs-from","type":"code","content":"import HandlebarsJS from \"https://dev.jspm.io/handlebars@4.7.6\";\nimport { Data, Engine } from \"lume/core.ts\";\n\nexport default class HandlebarsEngine implements Engine {\n  /** Render the content */\n  render(content: string, data: Data): string {\n    const template = HandlebarsJS.compile(content);\n    return template(data);\n  }\n\n  /** Register helpers */\n  addHelper() {}\n}\n","description":"Loaders and engines","section":"Core"},{"url":"/core/loaders/#to-use-this-template-engine-you","type":"paragraph","content":"To use this template engine you have to set as third argument of the loadPages\nfunction:","description":"Loaders and engines","section":"Core"},{"url":"/core/loaders/#import-textloader-from","type":"code","content":"import textLoader from \"lume/loaders/text.ts\";\nimport HandlebarsEngine from \"./handlebars-engine.ts\";\n\nsite.loadPages([\".hbs\"], textLoader, new HandlebarsEngine(site));\n","description":"Loaders and engines","section":"Core"},{"url":"/core/loaders/#now-all-files-with-the-.hbs","type":"paragraph","content":"Now, all files with the .hbs extension will be loaded using the textLoader\nand rendered using the Handlebars engine.","description":"Loaders and engines","section":"Core"},{"url":"/core/loaders/#note:-this-is-a-very-basic","type":"paragraph","content":"Note: this is a very basic implementation only as a example. You can see the\ncode of the available template engines in Lume for real examples.","description":"Loaders and engines","section":"Core"},{"url":"/core/processors/","type":"page","content":"Processors","section":"Core"},{"url":"/core/processors/#a-processor-is-a-function-to","type":"paragraph","content":"A processor is a function to transform the content of pages and assets. Let's\nsee an example of a processor to minify HTML pages:","description":"Processors","section":"Core"},{"url":"/core/processors/#function-minifyhtml(page)","type":"code","content":"function minifyHTML(page) {\n  page.content = minify(page.content);\n}\n","description":"Processors","section":"Core"},{"url":"/core/processors/#if-you-want-to-use-this","type":"paragraph","content":"If you want to use this processor to build your site, you can register it in the\n_config.js file:","description":"Processors","section":"Core"},{"url":"/core/processors/#site.process(\".html\"","type":"code","content":"site.process([\".html\"], minifyHTML);\n","description":"Processors","section":"Core"},{"url":"/core/processors/#now-all-html-pages-with-be","type":"paragraph","content":"Now, all HTML pages with be minified.","description":"Processors","section":"Core"},{"url":"/core/processors/#access-to-page-data","type":"heading","content":"Access to page data","description":"Processors","section":"Core"},{"url":"/core/processors/#as-you-can-see-in-the-previous","type":"paragraph","content":"As you can see in the previous example, the function receives an object with the\npage (or asset). This means that you can access not only to the page content but\nto many other data:","description":"Processors","section":"Core"},{"url":"/core/processors/#function-process(page)","type":"code","content":"function process(page) {\n  page.content; // The content of the page\n  page.document; // The parsed HTML code, to use the DOM API\n  page.src; // The info about the source file of this page\n  page.dest; // The info about the destination of the page\n  page.data; // All data available for this page (frontmatter merged with _data)\n}\n","description":"Processors","section":"Core"},{"url":"/core/processors/#for-example-let's-say-you-only","type":"paragraph","content":"For example, let's say you only want to minify the pages with the value minify\nas true:","description":"Processors","section":"Core"},{"url":"/core/processors/#site.process(\".html\"-(page)","type":"code","content":"site.process([\".html\"], (page) => {\n  if (page.data.minify) {\n    page.content = minify(page.content);\n  }\n});\n","description":"Processors","section":"Core"},{"url":"/core/processors/#you-can-use-the-dom-api","type":"paragraph","content":"You can use the DOM API (provided by\ndeno-dom) with methods like\nquerySelector, setAttribute, etc to modify HTML code. For example, let's\ncreate a processor to add automatically the alt attribute to all images:","description":"Processors","section":"Core"},{"url":"/core/processors/#site.process(\".html\"-(page)-1","type":"code","content":"site.process([\".html\"], (page) => {\n  page.document.querySelectorAll(\"img\").forEach((img) => {\n    if (!img.hasAttribute(\"alt\")) {\n      img.setAttribute(\"alt\", \"This is a random alt\");\n    }\n  });\n});\n","description":"Processors","section":"Core"},{"url":"/core/processors/#note:-processors-are-executed","type":"paragraph","content":"Note: processors are executed just after render the page (with a template\nengine).","description":"Processors","section":"Core"},{"url":"/core/processors/#process-assets","type":"heading","content":"Process assets","description":"Processors","section":"Core"},{"url":"/core/processors/#processors-only-can-transform","type":"paragraph","content":"Processors only can transform pages or assets that are previously loaded. So if\nyou want to process some assets (like CSS or JavaScript files), make sure that\nthey are loaded before. See Loaders for more information about how\nto register a new loader. Let's see an example of how to load and transform\nJavaScript files:","description":"Processors","section":"Core"},{"url":"/core/processors/#import-lume-from","type":"code","content":"import lume from \"lume/mod.ts\";\n\nconst site = lume();\n\n// Load JavaScript files as plain text:\nsite.loadAssets([\".js\"]);\n\n// Process the JavaScript files\nsite.process([\".js\"], function (page) {\n  page.content = myBundler(page.content);\n\n  page.dest.path += \".min\"; // Append .min to the filename, so it will be saved as example.min.js\n});\n","description":"Processors","section":"Core"},{"url":"/core/processors/#preprocess","type":"heading","content":"Preprocess","description":"Processors","section":"Core"},{"url":"/core/processors/#if-you-need-to-execute-a","type":"paragraph","content":"If you need to execute a function before rendering (for example, to\nconfigure a custom template engine or add extra data to some pages), you can use\na preprocessor. Preprocessors work like processors but with they are\nexecuted before rendering.","description":"Processors","section":"Core"},{"url":"/core/processors/#let's-create-a-preprocessor-to","type":"paragraph","content":"Let's create a preprocessor to include a variable with the source filename:","description":"Processors","section":"Core"},{"url":"/core/processors/#site.preprocess(-\".html\"","type":"code","content":"site.preprocess(\n  [\".html\"],\n  (page) => page.data.filename = page.src.path + page.src.ext,\n);\n","description":"Processors","section":"Core"},{"url":"/core/processors/#extensions","type":"heading","content":"Extensions","description":"Processors","section":"Core"},{"url":"/core/processors/#both-processors-and","type":"paragraph","content":"Both processors and preprocessors are tied to file extensions (.html, .js\netc). To decide if a page must use a registered processor or preprocessor, Lume\nsearch this extension in the input file (like .md or .njk) or the output\nfile (like .html or .css). This means that you can create processors to\nmodify a page based in the extension of the input file, not only the output.","description":"Processors","section":"Core"},{"url":"/core/processors/#global-(pre)processors","type":"heading","content":"Global (pre)processors","description":"Processors","section":"Core"},{"url":"/core/processors/#if-you-want-to-run-a-processor","type":"paragraph","content":"If you want to run a processor or preprocessor with all pages, use * in the\nfirst argument:","description":"Processors","section":"Core"},{"url":"/core/processors/#site.process(\"*\"","type":"code","content":"site.process(\"*\", processAllPages);\n","description":"Processors","section":"Core"},{"url":"/core/faq/","type":"page","content":"FAQ","section":"Core"},{"url":"/core/faq/#solutions-to-some-common-lume","type":"paragraph","content":"Solutions to some common Lume problems.","description":"FAQ","section":"Core"},{"url":"/core/faq/#how-to-export-.css-files%3F","type":"heading","content":"How to export .css files?","description":"FAQ","section":"Core"},{"url":"/core/faq/#if-you-want-to-process-the-css","type":"list","content":"If you want to process the CSS files with postcss, use the\npostcss plugin.","description":"FAQ","section":"Core"},{"url":"/core/faq/#to-load-.css-files-without","type":"list","content":"To load .css files without using postcss, add site.loadAssets([\".css]) to\nyour _config.js file.","description":"FAQ","section":"Core"},{"url":"/core/faq/#how-to-export-.js%2F.ts-files%3F","type":"heading","content":"How to export .js/.ts files?","description":"FAQ","section":"Core"},{"url":"/core/faq/#use-the-bundler-plugin-if-you","type":"list","content":"Use the bundler plugin if you want to:\n\nTranspile Typescript files to Javascript.\nBundle the Javascript to a single file.","description":"FAQ","section":"Core"},{"url":"/core/faq/#use-the-terser-plugin-if-you","type":"list","content":"Use the terser plugin if you want to minify the js\ncode.","description":"FAQ","section":"Core"},{"url":"/core/faq/#to-load-.js-files-without-using","type":"list","content":"To load .js files without using the bundler or terser plugins, add\nsite.loadAssets([\".js]) to your _config.js file.","description":"FAQ","section":"Core"},{"url":"/core/faq/#how-to-export-.svg-files%3F","type":"heading","content":"How to export .svg files?","description":"FAQ","section":"Core"},{"url":"/core/faq/#if-you-want-to-optimize-the-svg","type":"list","content":"If you want to optimize the svg files, use the\nsvgo plugin.","description":"FAQ","section":"Core"},{"url":"/core/faq/#to-load-.svg-files-without","type":"list","content":"To load .svg files without using postcss, add site.loadAssets([\".svg]) to\nyour _config.js file.","description":"FAQ","section":"Core"},{"url":"/core/faq/#remember-that-you-can-copy","type":"paragraph","content":"Remember that you can copy files without load them (which is faster) with\nsite.copy().","description":"FAQ","section":"Core"},{"url":"/core/faq/#how-to-generate-non-html-files%3F","type":"heading","content":"How to generate non-HTML files?","description":"FAQ","section":"Core"},{"url":"/core/faq/#by-default-the-files-.md-.njk","type":"paragraph","content":"By default, the files .md, .njk etc generate files with the .html\nextension. For example: /about-me.md outputs /about-me/index.html. If you\nwant a different extension, you have two options:","description":"FAQ","section":"Core"},{"url":"/core/faq/#add-a-subextension-to-the-file.","type":"list","content":"Add a subextension to the file. For example, styles.css.njk is a nunjucks\nfile that output the file styles.css.","description":"FAQ","section":"Core"},{"url":"/core/faq/#or-include-the-url-variable-in","type":"list","content":"Or include the url variable in the front matter or named module.","description":"FAQ","section":"Core"},{"url":"/core/faq/#more-info-in-this","type":"paragraph","content":"More info\nin this discussion.","description":"FAQ","section":"Core"},{"url":"/core/faq/#how-to-insert-variables-in-a-markdown-file%3F","type":"heading","content":"How to insert variables in a markdown file?","description":"FAQ","section":"Core"},{"url":"/core/faq/#markdown-is-a-format-that","type":"paragraph","content":"Markdown is a format that simply parse and output html, but it doesn't have any\nway to insert dynamic variables. To do that, you must combine markdown with any\nother template engine that support variables, for example Nunjucks.","description":"FAQ","section":"Core"},{"url":"/core/faq/#this-is-an-example-of-a","type":"paragraph","content":"This is an example of a markdown file that use Nunjucks to insert variables and\nmarkdown to parse and output the final html code:","description":"FAQ","section":"Core"},{"url":"/core/faq/#more-info-about-configure","type":"paragraph","content":"More info\nabout configure multiple template engines.","description":"FAQ","section":"Core"},{"url":"/advanced/order-of-operations/","type":"page","content":"Order of operations","section":"Advanced"},{"url":"/advanced/order-of-operations/#this-is-a-high-level","type":"paragraph","content":"This is a high level description of how Lume build your site. When you run\nlume, the following operations are executed in this order:","description":"Order of operations","section":"Advanced"},{"url":"/advanced/order-of-operations/#dispatch-the-event","type":"list","content":"Dispatch the event beforeBuild.","description":"Order of operations","section":"Advanced"},{"url":"/advanced/order-of-operations/#ensure-the-dest-folder-is","type":"list","content":"Ensure the dest folder is empty.","description":"Order of operations","section":"Advanced"},{"url":"/advanced/order-of-operations/#copy-all-files-and-folders","type":"list","content":"Copy all files and folders configured with\nsite.copy() to the\ndest folder.","description":"Order of operations","section":"Advanced"},{"url":"/advanced/order-of-operations/#walk-the-src-folder-recursively","type":"list","content":"Walk the src folder recursively and load all files matching with a valid\nfile extension, like .md, .njk, etc.\n\nSkip files and folders starting with _, ., ignored with site.ignore()\nor previously copies with site.copy().\nIf the name of the file is _data or is inside a _data folder, is shared\ndata.\nOtherwise, it's a page.","description":"Order of operations","section":"Advanced"},{"url":"/advanced/order-of-operations/#group-all-pages-by-renderorder","type":"list","content":"Group all pages by renderOrder value and sort\nthem.","description":"Order of operations","section":"Advanced"},{"url":"/advanced/order-of-operations/#for-each-group-of-pages-with","type":"list","content":"For each group of pages with the same renderOrder:\n\nIf the page content is a generator, generate all\nthe sub-pages.\nCalculate the final url.\nRun the preprocessors registered.\nRender the page using the assigned\ntemplate engine and\nlayout.","description":"Order of operations","section":"Advanced"},{"url":"/advanced/order-of-operations/#dispatch-the-event-1","type":"list","content":"Dispatch the event afterRender.","description":"Order of operations","section":"Advanced"},{"url":"/advanced/order-of-operations/#run-the-processors","type":"list","content":"Run the processors registered","description":"Order of operations","section":"Advanced"},{"url":"/advanced/order-of-operations/#dispatch-the-event-2","type":"list","content":"Dispatch the event beforeSave.","description":"Order of operations","section":"Advanced"},{"url":"/advanced/order-of-operations/#save-all-pages-to-dest","type":"list","content":"Save all pages to dest folder.","description":"Order of operations","section":"Advanced"},{"url":"/advanced/order-of-operations/#dispatch-the-event-3","type":"list","content":"Dispatch the event afterBuild.","description":"Order of operations","section":"Advanced"},{"url":"/advanced/order-of-operations/#watch-mode","type":"heading","content":"Watch mode","description":"Order of operations","section":"Advanced"},{"url":"/advanced/order-of-operations/#in-watch-mode-(with-lume","type":"paragraph","content":"In watch mode (with lume --serve or lume --watch), the first build is\nexactly the same, but the succesive changes have some differences:","description":"Order of operations","section":"Advanced"},{"url":"/advanced/order-of-operations/#the-dest-folder-is-not","type":"list","content":"The dest folder is not emptied.","description":"Order of operations","section":"Advanced"},{"url":"/advanced/order-of-operations/#only-the-files-with-changes-are","type":"list","content":"Only the files with changes are reloaded.","description":"Order of operations","section":"Advanced"},{"url":"/advanced/order-of-operations/#the-steps-5-to-9-are-exactly","type":"list","content":"The steps 5 to 9 are exactly the same. All pages (not only the modified) are\nre-rendered. This is because a change in one file can affect to many pages, so\nwe have to render all pages again.","description":"Order of operations","section":"Advanced"},{"url":"/advanced/order-of-operations/#only-the-pages-that-have","type":"list","content":"Only the pages that have changed its content are saved in dest.","description":"Order of operations","section":"Advanced"},{"url":"/advanced/plugins/","type":"page","content":"Creating plugins","section":"Advanced"},{"url":"/advanced/plugins/#lume-is-an-static-site","type":"paragraph","content":"Lume is an static site generator that can be extended easily adding more\nloaders, engines, processors etc.\nPlugins provide an easy interface to extend Lume without write too much code in\nthe _config.js file.","description":"Creating plugins","section":"Advanced"},{"url":"/advanced/plugins/#a-plugin-is-just-a-function","type":"paragraph","content":"A plugin is just a function that receives a lume instance in the first argument,\nin order to configure and register new elements to it.","description":"Creating plugins","section":"Advanced"},{"url":"/advanced/plugins/#for-example-to-register-a-new","type":"paragraph","content":"For example, to register a new template engine, you have to create an instance\nand decide the extensions to apply,\nas you can see in the docs:","description":"Creating plugins","section":"Advanced"},{"url":"/advanced/plugins/#import-textloader-from","type":"code","content":"import textLoader from \"lume/loaders/text.ts\";\nimport CustomEngine from \"https://deno.land/x/my-custom-engine/mod.ts\";\n\nconst myEngine = new CustomEngine();\nsite.loadPages([\".me\"], textLoader, myEngine);\n","description":"Creating plugins","section":"Advanced"},{"url":"/advanced/plugins/#you-can-encapsulate-this-code","type":"paragraph","content":"You can encapsulate this code in a plugin:","description":"Creating plugins","section":"Advanced"},{"url":"/advanced/plugins/#import-textloader-from-1","type":"code","content":"import textLoader from \"lume/loaders/text.ts\";\nimport CustomEngine from \"https://deno.land/x/my-custom-engine/mod.ts\";\n\nexport default function () {\n  return (site) => {\n    const myEngine = new CustomEngine();\n    site.loadPages([\".me\"], textLoader, myEngine);\n  };\n}\n","description":"Creating plugins","section":"Advanced"},{"url":"/advanced/plugins/#so-in-your-_config.js-you-only","type":"paragraph","content":"So in your _config.js you only have to import the plugin and use it:","description":"Creating plugins","section":"Advanced"},{"url":"/advanced/plugins/#import-myplugin-from","type":"code","content":"import myPlugin from \"https://deno.land/x/my-lume-plugin/mod.ts\";\n\nsite.use(myPlugin());\n","description":"Creating plugins","section":"Advanced"},{"url":"/advanced/plugins/#to-pass-configuration-options","type":"paragraph","content":"To pass configuration options to your plugin, just add arguments to the\nfunctions returning the plugin. For example, let's say you want to customize the\nfile extensions to apply the template engine:","description":"Creating plugins","section":"Advanced"},{"url":"/advanced/plugins/#import-textloader-from-2","type":"code","content":"import textLoader from \"lume/loaders/text.ts\";\nimport CustomEngine from \"https://deno.land/x/my-custom-engine/mod.ts\";\nimport { merge } from \"lume/core/utils.ts\";\n\nexport interface Options {\n  extensions: string[];\n}\n\nconst defaults: Options = {\n  extensions: [\".me\"],\n};\n\nexport default function (userOptions?: Partial<Options>) {\n  const options = merge(defaults, userOptions);\n\n  return (site) => {\n    const myEngine = new CustomEngine();\n    site.loadPages(options.extensions, textLoader, myEngine);\n  };\n}\n","description":"Creating plugins","section":"Advanced"},{"url":"/advanced/plugins/#now-in-your-_config.js-file","type":"paragraph","content":"Now, in your _config.js file you can customize the extensions:","description":"Creating plugins","section":"Advanced"},{"url":"/advanced/plugins/#import-myplugin-from-1","type":"code","content":"import myPlugin from \"https://deno.land/x/my-lume-plugin/mod.ts\";\n\nsite.use(myPlugin([\".me\", \".mo\"]));\n","description":"Creating plugins","section":"Advanced"},{"url":"/advanced/plugins/#take-a-look-to-the-repository","type":"paragraph","content":"Take a look to the\nrepository of Lume plugins\nfor more real examples.","description":"Creating plugins","section":"Advanced"},{"url":"/advanced/migrate-from-11ty/","type":"page","content":"Migrate from Eleventy","section":"Advanced"},{"url":"/advanced/migrate-from-11ty/#eleventy-is-a-great-ssg-with-a","type":"paragraph","content":"Eleventy is a great SSG with a big community. Lume was\ninspired in it, so if you have a Eleventy project and want to migrate to Lume\n(maybe it's not a good idea), or simply are familiar with Eleventy and want to\nsee the differences with Lume, this short guide with the most important\ndifferences can help.","description":"Migrate from Eleventy","section":"Advanced"},{"url":"/advanced/migrate-from-11ty/#in-eleventy-the-configuration","type":"list","content":"In Eleventy, the configuration file is .eleventy.js, in Lume is\n_config.ts.","description":"Migrate from Eleventy","section":"Advanced"},{"url":"/advanced/migrate-from-11ty/#to-ignore-files-prepend-the","type":"list","content":"To ignore files, prepend the filename\nwith a . or _, or use site.ignore(\"filename\").","description":"Migrate from Eleventy","section":"Advanced"},{"url":"/advanced/migrate-from-11ty/#to-add-a-plugin-in-lume:","type":"list","content":"To add a plugin in Lume: site.use(plugin()) (in Eleventy is\nconfig.addPlugin(plugin))","description":"Migrate from Eleventy","section":"Advanced"},{"url":"/advanced/migrate-from-11ty/#to-copy-a-filefolder-in-lume:","type":"list","content":"To copy a file/folder in Lume: site.copy(\"img\") (in Eleventy is\nconfig.addPassthroughCopy(\"img\"))","description":"Migrate from Eleventy","section":"Advanced"},{"url":"/advanced/migrate-from-11ty/#to-add-a-filter-in-lume:","type":"list","content":"To add a filter in Lume: site.filter(\"name\", filterFn) (in Eleventy is\nconfig.addFilter(\"name\", \"filterFn)).","description":"Migrate from Eleventy","section":"Advanced"},{"url":"/advanced/migrate-from-11ty/#to-add-a-custom-tag-in-lume","type":"list","content":"To add a custom tag in Lume, use\nsite.helper(\"name\", helperFn, {type: \"tag\"}).","description":"Migrate from Eleventy","section":"Advanced"},{"url":"/advanced/migrate-from-11ty/#template-languages","type":"heading","content":"Template languages","description":"Migrate from Eleventy","section":"Advanced"},{"url":"/advanced/migrate-from-11ty/#in-lume-html-files-are-not","type":"list","content":"In Lume, HTML files are not processed by default.","description":"Migrate from Eleventy","section":"Advanced"},{"url":"/advanced/migrate-from-11ty/#there's-no-support-for","type":"list","content":"There's no support for Handlebars (.hbs) and Mustache (.mustache) files.","description":"Migrate from Eleventy","section":"Advanced"},{"url":"/advanced/migrate-from-11ty/#instead-of-.ejs-lume-uses-.eta","type":"list","content":"Instead of .ejs, Lume uses .eta template engine.","description":"Migrate from Eleventy","section":"Advanced"},{"url":"/advanced/migrate-from-11ty/#site-build","type":"heading","content":"Site build","description":"Migrate from Eleventy","section":"Advanced"},{"url":"/advanced/migrate-from-11ty/#in-lume-there-isn't-the","type":"list","content":"In Lume, there isn't the concept of\ncollections. To get a list of pages,\nuse the search helper.","description":"Migrate from Eleventy","section":"Advanced"},{"url":"/advanced/migrate-from-11ty/#in-lume-all-data-files-are","type":"list","content":"In Lume, all data files are _data.* or _data/*. In Eleventy\nthere are different ways to place data,\nand _data/* is only used for global data.","description":"Migrate from Eleventy","section":"Advanced"},{"url":"/advanced/migrate-from-11ty/#to-paginate-in-lume-you-have","type":"list","content":"To paginate in Lume, you have to create a .tmpl.js or .tmpl.ts file\nexporting a generator (more info). There's no way to\ndo it using the front matter, like in Eleventy.","description":"Migrate from Eleventy","section":"Advanced"},{"url":"/advanced/migrate-from-11ty/#the-event-beforewatch-in","type":"list","content":"The event beforeWatch in Eleventy is named beforeUpdate in Lume.","description":"Migrate from Eleventy","section":"Advanced"},{"url":"/advanced/migrate-from-11ty/#11ty-plugins","type":"heading","content":"11ty plugins","description":"Migrate from Eleventy","section":"Advanced"},{"url":"/advanced/migrate-from-11ty/#serverless-lume-has-not-yet","type":"paragraph","content":"Serverless\nLume has not yet support for server side rendering (but it's on the\nradar).\nImage\nThere isn't yet a plugin to manipulate images, because I didn't find any\ngood image library for Deno.\nCache assets\nThere isn't any plugin for that.\nRSS\nYou don't need a plugin to generate a RSS files in Lume.\nSee this example\nSyntax Highlighting\nThere's the\ncode highlight plugin for that.\nNavigation\nThere isn't a plugin for that. But you can (partially) emulate it\nusing the search helper.\nInclusive Language\nThere isn't a plugin for that (I'd love it).","description":"Migrate from Eleventy","section":"Advanced"},{"url":"/advanced/migrate-from-11ty/#things-that-lume-does-and-eleventy-doesn't","type":"heading","content":"Things that Lume does and Eleventy doesn't","description":"Migrate from Eleventy","section":"Advanced"},{"url":"/advanced/migrate-from-11ty/#process-assets-(like-css-js-or","type":"list","content":"Process assets (like css, js or svg files).","description":"Migrate from Eleventy","section":"Advanced"},{"url":"/advanced/migrate-from-11ty/#support-for-jsx-and","type":"list","content":"Support for JSX and TSX.","description":"Migrate from Eleventy","section":"Advanced"},{"url":"/advanced/migrate-from-11ty/#you-can-search-pages-by-any","type":"list","content":"You can search pages by any criteria, not only tags.","description":"Migrate from Eleventy","section":"Advanced"},{"url":"/advanced/migrate-from-11ty/#it's-easy-to-add-processors-and","type":"list","content":"It's easy to add processors and preprocessors to do arbitrary things like\nmanipulate HTML code using DOM apis.","description":"Migrate from Eleventy","section":"Advanced"},{"url":"/advanced/scoped-updates/","type":"page","content":"Update optimization","section":"Advanced"},{"url":"/advanced/scoped-updates/#as-you-can-see-in-the-order-of","type":"paragraph","content":"As you can see in the order of operations section,\nafter any change in the watch mode (with lume --serve or lume --watch), the\nentire site is built again. This happens because it's almost impossible to\nknow in advance which pages will be affected by a change in any file. For\nexample:","description":"Update optimization","section":"Advanced"},{"url":"/advanced/scoped-updates/#a-change-in-a-css-file-can","type":"list","content":"A change in a CSS file can affect to other CSS files that @import it (if you\nuse postcss plugin).","description":"Update optimization","section":"Advanced"},{"url":"/advanced/scoped-updates/#if-you-also-use-the-inline","type":"list","content":"If you also use the inline plugin, that can insert the\nCSS code in the HTML, this change will affect to all HTML pages.","description":"Update optimization","section":"Advanced"},{"url":"/advanced/scoped-updates/#lume-is-conservative-about-the","type":"paragraph","content":"Lume is conservative about the updating process, to make sure that any change in\nany file will be correctly applied to all pages. This is why the entire site is\nrebuilt after any change.","description":"Update optimization","section":"Advanced"},{"url":"/advanced/scoped-updates/#in-large-sites-or-sites-with","type":"paragraph","content":"In large sites, or sites with expensive processors (like bundlers) this can\nincrease the duration of the update process. There's a way to customize this\nbehavior using a feature named Scoped Updates. It's a way to define\ndifferent \"scopes\" (collections of independent files whose changes won't affect\nto other pages).","description":"Update optimization","section":"Advanced"},{"url":"/advanced/scoped-updates/#for-example-let's-say-that","type":"paragraph","content":"For example, let's say that you're building a website that has some javascript\nand css files, and these files are totally independent, meaning that:","description":"Update optimization","section":"Advanced"},{"url":"/advanced/scoped-updates/#changes-in-any-css-file-only","type":"list","content":"Changes in any CSS file only affects to other CSS files.","description":"Update optimization","section":"Advanced"},{"url":"/advanced/scoped-updates/#changes-in-any-jsts-file-only","type":"list","content":"Changes in any JS/TS file only affects to other JS/TS files.","description":"Update optimization","section":"Advanced"},{"url":"/advanced/scoped-updates/#changes-in-any-other-file","type":"list","content":"Changes in any other file (Nunjucks, Yaml, Markdown, etc) won't affect to CSS,\nJS or TS files.","description":"Update optimization","section":"Advanced"},{"url":"/advanced/scoped-updates/#in-this-case-you-create-two","type":"paragraph","content":"In this case you create two scopes, one for CSS files and other for JS/TS files.\nTo do that, just add this code to your _config.js file:","description":"Update optimization","section":"Advanced"},{"url":"/advanced/scoped-updates/#site.scopedupdates(-(path)-greater","type":"code","content":"site.scopedUpdates(\n  (path) => path.endsWith(\".css\"), //Select all *.css files\n  (path) => /\\.(js|ts)$/.test(path), //Select all *.js and *.ts files\n);\n","description":"Update optimization","section":"Advanced"},{"url":"/advanced/scoped-updates/#every-function-passed-to-this","type":"paragraph","content":"Every function passed to this function will create a new scope. Now, if a .css\nfile changes, only the .css files are rebuilt, but not any other file. If a\n.js or .ts file is updated, only these files are built. And if any other\nfile changes, all files are rebuilt except .css, .ts and .js files.","description":"Update optimization","section":"Advanced"}]